# Generated by Django 4.2.5 on 2025-04-26 10:20

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.RunSQL(
            sql="CREATE SCHEMA IF NOT EXISTS portal;",
            reverse_sql="DROP SCHEMA IF EXISTS portal CASCADE;"
        ),
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('userid', models.IntegerField(db_column='userid', verbose_name='User ID')),
                ('entity', models.CharField(max_length=50, verbose_name='Entity')),
                ('isdeleted', models.BooleanField(verbose_name='Is Deleted')),
            ],
            options={
                'verbose_name': 'Account',
                'verbose_name_plural': 'Accounts',
                'db_table': '"public"."accounts"',
            },
        ),
        migrations.CreateModel(
            name='EnergoDevice',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('ctime', models.DateTimeField(verbose_name='Ctime')),
                ('dmodel_id', models.IntegerField(verbose_name='Model ID')),
                ('dmodel_sensor', models.CharField(max_length=255, verbose_name='Sensor Model')),
                ('serial_num', models.CharField(max_length=255, verbose_name='Serial Number')),
                ('device_id', models.IntegerField(verbose_name='Device ID')),
                ('folder_id', models.IntegerField(verbose_name='Folder ID')),
                ('location', models.CharField(max_length=255, verbose_name='Location')),
                ('physical_person', models.BooleanField(verbose_name='Physical Person')),
                ('owner_name', models.CharField(max_length=255, verbose_name='Owner Name')),
                ('beg_value', models.DecimalField(decimal_places=6, max_digits=20, verbose_name='Beginning Value')),
                ('phones', models.CharField(max_length=255, verbose_name='Phones')),
                ('sector_id', models.IntegerField(verbose_name='Sector ID')),
                ('mount_id', models.IntegerField(verbose_name='Mount ID')),
                ('mount', models.CharField(max_length=255, verbose_name='Mount')),
                ('archives', models.IntegerField(verbose_name='Archives')),
                ('alias', models.CharField(max_length=255, verbose_name='Alias')),
                ('enable', models.BooleanField(verbose_name='Enabled')),
                ('resource_id', models.IntegerField(verbose_name='Resource ID')),
                ('resource_inx', models.IntegerField(verbose_name='Resource Index')),
                ('scheme_id', models.IntegerField(verbose_name='Scheme ID')),
                ('dscan', models.CharField(max_length=255, verbose_name='DScan')),
                ('calc', models.CharField(max_length=255, verbose_name='Calc')),
                ('account', models.CharField(max_length=255, verbose_name='Account')),
                ('date_next', models.DateField(blank=True, null=True, verbose_name='Next Date')),
                ('date_verification', models.DateField(blank=True, null=True, verbose_name='Verification Date')),
                ('c', models.IntegerField(blank=True, null=True, verbose_name='C')),
                ('dpu', models.CharField(max_length=255, verbose_name='DPU')),
                ('position_vertical', models.CharField(max_length=255, verbose_name='Position Vertical')),
                ('owner_device', models.CharField(max_length=255, verbose_name='Owner Device')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
            ],
            options={
                'verbose_name': 'Energo Device',
                'verbose_name_plural': 'Energo Devices',
                'db_table': '"public"."energo_devices"',
            },
        ),
        migrations.CreateModel(
            name='EnergoDeviceData',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('value', models.DecimalField(decimal_places=6, max_digits=20, verbose_name='Value')),
                ('value_error', models.DecimalField(blank=True, decimal_places=6, max_digits=20, null=True, verbose_name='Value Error')),
                ('rvalue_id', models.IntegerField(verbose_name='RValue ID')),
                ('c', models.IntegerField(blank=True, null=True, verbose_name='C')),
                ('ctime', models.DateTimeField(verbose_name='Ctime')),
                ('datetime', models.DateTimeField(verbose_name='Datetime')),
                ('type_arch_orig', models.IntegerField(verbose_name='Original Archive Type')),
                ('type_arch', models.IntegerField(verbose_name='Archive Type')),
                ('success', models.BooleanField(verbose_name='Success')),
                ('error_arch', models.TextField(blank=True, null=True, verbose_name='Error Archive')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('device_id', models.IntegerField(verbose_name='Device ID')),
            ],
            options={
                'verbose_name': 'Energo Device Data',
                'verbose_name_plural': 'Energo Device Data',
                'db_table': '"public"."energo_device_data"',
            },
        ),
        migrations.CreateModel(
            name='EnergoFolder',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('rso_name', models.CharField(max_length=255)),
                ('contract_num', models.CharField(max_length=255)),
                ('contract_date', models.DateField()),
                ('consumer', models.CharField(max_length=255)),
                ('district', models.CharField(max_length=255)),
                ('town', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Energo Folder',
                'verbose_name_plural': 'Energo Folders',
                'db_table': '"public"."energo_folders"',
            },
        ),
        migrations.CreateModel(
            name='ErcData',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('abonent', models.CharField(max_length=64)),
                ('entity', models.CharField(max_length=64)),
                ('surname', models.CharField(max_length=64)),
                ('given_name', models.CharField(max_length=64)),
                ('fathers_name', models.CharField(max_length=64)),
                ('entity_gar_su', models.CharField(max_length=64)),
                ('entity_type', models.CharField(max_length=64)),
                ('sector', models.CharField(max_length=64)),
                ('team', models.CharField(max_length=64)),
                ('city', models.CharField(max_length=64)),
                ('street_group', models.CharField(max_length=64)),
                ('street_prefix', models.CharField(max_length=64)),
                ('street', models.CharField(max_length=64)),
                ('house_prefix', models.CharField(max_length=64)),
                ('house_type', models.CharField(max_length=64)),
                ('house_number', models.CharField(max_length=64)),
                ('litera', models.CharField(max_length=64)),
                ('flat', models.CharField(max_length=64)),
                ('flat_test', models.CharField(max_length=64)),
                ('flat_type', models.CharField(max_length=64)),
                ('object', models.CharField(db_column='object', max_length=64)),
                ('registered_amount', models.CharField(max_length=64)),
                ('floor', models.CharField(max_length=64)),
                ('phone_number1', models.CharField(max_length=64)),
                ('phone_number2', models.CharField(max_length=64)),
                ('iin', models.CharField(max_length=64)),
                ('whaelthy_code', models.CharField(max_length=64)),
                ('tarif_type', models.CharField(max_length=64)),
                ('tarif_water', models.CharField(max_length=64)),
                ('tarif_saverage', models.CharField(max_length=64)),
                ('tu', models.CharField(max_length=64)),
                ('meter_type', models.CharField(max_length=64)),
                ('meter_subtype', models.CharField(max_length=64)),
                ('meter_number', models.CharField(max_length=64)),
                ('verification_date', models.CharField(max_length=64)),
                ('readings_date', models.CharField(max_length=64)),
                ('readings', models.CharField(max_length=64)),
                ('norma', models.CharField(max_length=64)),
                ('test1', models.CharField(max_length=64)),
                ('test2', models.CharField(max_length=64)),
                ('area', models.CharField(max_length=64)),
                ('area_type', models.CharField(max_length=64)),
                ('seal_date', models.CharField(max_length=64)),
                ('seal_number', models.CharField(max_length=64)),
                ('source', models.CharField(max_length=64)),
                ('poliv', models.CharField(max_length=64)),
                ('tu_saverage', models.CharField(max_length=64)),
                ('saverage_type', models.CharField(max_length=64)),
                ('start_date', models.CharField(max_length=64)),
                ('meter_id', models.CharField(max_length=64)),
                ('blank_number', models.CharField(max_length=64)),
                ('tur', models.CharField(max_length=64)),
                ('bit_depth', models.CharField(max_length=64)),
                ('reagings_date', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'ERC Data',
                'verbose_name_plural': 'ERC Data',
                'db_table': '"public"."erc_data"',
            },
        ),
        migrations.CreateModel(
            name='ErcData1',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('abonent', models.CharField(max_length=64)),
                ('entity', models.CharField(max_length=64)),
                ('surname', models.CharField(max_length=64)),
                ('given_name', models.CharField(max_length=64)),
                ('fathers_name', models.CharField(max_length=64)),
                ('entity_gar_su', models.CharField(max_length=64)),
                ('entity_type', models.CharField(max_length=64)),
                ('sector', models.CharField(max_length=64)),
                ('team', models.CharField(max_length=64)),
                ('city', models.CharField(max_length=64)),
                ('street_group', models.CharField(max_length=64)),
                ('street_prefix', models.CharField(max_length=64)),
                ('street', models.CharField(max_length=64)),
                ('house_prefix', models.CharField(max_length=64)),
                ('house_type', models.CharField(max_length=64)),
                ('house_number', models.CharField(max_length=64)),
                ('litera', models.CharField(max_length=64)),
                ('flat', models.CharField(max_length=64)),
                ('flat_test', models.CharField(max_length=64)),
                ('flat_type', models.CharField(max_length=64)),
                ('object', models.CharField(db_column='object', max_length=64)),
                ('registered_amount', models.CharField(max_length=64)),
                ('floor', models.CharField(max_length=64)),
                ('phone_number1', models.CharField(max_length=64)),
                ('phone_number2', models.CharField(max_length=64)),
                ('iin', models.CharField(max_length=64)),
                ('whaelthy_code', models.CharField(max_length=64)),
                ('tarif_type', models.CharField(max_length=64)),
                ('tarif_water', models.CharField(max_length=64)),
                ('tarif_saverage', models.CharField(max_length=64)),
                ('tu', models.CharField(max_length=64)),
                ('meter_type', models.CharField(max_length=64)),
                ('meter_subtype', models.CharField(max_length=64)),
                ('meter_number', models.CharField(max_length=64)),
                ('verification_date', models.CharField(max_length=64)),
                ('readings_date', models.CharField(max_length=64)),
                ('norma', models.CharField(max_length=64)),
                ('test1', models.CharField(max_length=64)),
                ('test2', models.CharField(max_length=64)),
                ('area', models.CharField(max_length=64)),
                ('area_type', models.CharField(max_length=64)),
                ('seal_date', models.CharField(max_length=64)),
                ('seal_number', models.CharField(max_length=64)),
                ('source', models.CharField(max_length=64)),
                ('poliv', models.CharField(max_length=64)),
                ('tu_saverage', models.CharField(max_length=64)),
                ('saverage_type', models.CharField(max_length=64)),
                ('start_date', models.CharField(max_length=64)),
                ('meter_id', models.CharField(max_length=64)),
                ('blank_number', models.CharField(max_length=64)),
                ('tur', models.CharField(max_length=64)),
                ('bit_depth', models.CharField(max_length=64)),
            ],
            options={
                'verbose_name': 'ERC Data 1',
                'verbose_name_plural': 'ERC Data 1',
                'db_table': '"public"."erc_data1"',
            },
        ),
        migrations.CreateModel(
            name='ErcData2',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('abonent', models.CharField(max_length=64)),
                ('entity', models.CharField(max_length=64)),
                ('surname', models.CharField(max_length=64)),
                ('given_name', models.CharField(max_length=64)),
                ('fathers_name', models.CharField(max_length=64)),
                ('entity_gar_su', models.CharField(max_length=64)),
                ('entity_type', models.CharField(max_length=64)),
                ('sector', models.CharField(max_length=64)),
                ('team', models.CharField(max_length=64)),
                ('city', models.CharField(max_length=64)),
                ('street_group', models.CharField(max_length=64)),
                ('street_prefix', models.CharField(max_length=64)),
                ('street', models.CharField(max_length=64)),
                ('house_prefix', models.CharField(max_length=64)),
                ('house_type', models.CharField(max_length=64)),
                ('house_number', models.CharField(max_length=64)),
                ('litera', models.CharField(max_length=64)),
                ('flat', models.CharField(max_length=64)),
                ('flat_test', models.CharField(max_length=64)),
                ('flat_type', models.CharField(max_length=64)),
                ('object', models.CharField(db_column='object', max_length=64)),
                ('registered_amount', models.CharField(max_length=64)),
                ('floor', models.CharField(max_length=64)),
                ('phone_number1', models.CharField(max_length=64)),
                ('phone_number2', models.CharField(max_length=64)),
                ('iin', models.CharField(max_length=64)),
                ('whaelthy_code', models.CharField(max_length=64)),
                ('tarif_type', models.CharField(max_length=64)),
                ('tarif_water', models.CharField(max_length=64)),
                ('tarif_saverage', models.CharField(max_length=64)),
                ('tu', models.CharField(max_length=64)),
                ('meter_type', models.CharField(max_length=64)),
                ('meter_subtype', models.CharField(max_length=64)),
                ('meter_number', models.CharField(max_length=64)),
                ('verification_date', models.CharField(max_length=64)),
                ('readings_date', models.CharField(max_length=64)),
                ('readings', models.CharField(max_length=64)),
                ('norma', models.CharField(max_length=64)),
                ('test1', models.CharField(max_length=64)),
                ('test2', models.CharField(max_length=64)),
                ('area', models.CharField(max_length=64)),
                ('area_type', models.CharField(max_length=64)),
                ('seal_date', models.CharField(max_length=64)),
                ('seal_number', models.CharField(max_length=64)),
                ('source', models.CharField(max_length=64)),
                ('poliv', models.CharField(max_length=64)),
                ('tu_saverage', models.CharField(max_length=64)),
                ('saverage_type', models.CharField(max_length=64)),
                ('start_date', models.CharField(max_length=64)),
                ('meter_id', models.CharField(max_length=64)),
                ('blank_number', models.CharField(max_length=64)),
                ('tur', models.CharField(max_length=64)),
                ('bit_depth', models.CharField(max_length=64)),
            ],
            options={
                'verbose_name': 'ERC Data 2',
                'verbose_name_plural': 'ERC Data 2',
                'db_table': '"public"."erc_data2"',
            },
        ),
        migrations.CreateModel(
            name='Incorrect',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('abonent_id', models.IntegerField(blank=True, null=True, verbose_name='Абонент')),
                ('account_id', models.IntegerField(blank=True, null=True, verbose_name='ЛС')),
                ('point_num', models.IntegerField(blank=True, null=True, verbose_name='Точка учёта')),
                ('rdate', models.DateField(blank=True, null=True, verbose_name='Дата снятия')),
                ('rvalue', models.DecimalField(blank=True, decimal_places=3, max_digits=12, null=True, verbose_name='Показание')),
                ('meter_id', models.IntegerField(blank=True, null=True, verbose_name='Код прибора')),
                ('error_reason', models.TextField(verbose_name='Причина ошибки')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Время записи')),
            ],
            options={
                'verbose_name': 'Ошибочная запись',
                'verbose_name_plural': 'Ошибочные записи',
                'db_table': '"public"."incorrect"',
            },
        ),
        migrations.CreateModel(
            name='IotMeter',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('modem_id', models.IntegerField(verbose_name='Modem ID')),
                ('port', models.IntegerField(verbose_name='Port')),
                ('serial_number', models.TextField(verbose_name='Serial Number')),
                ('consumer', models.TextField(verbose_name='Consumer')),
                ('account_id', models.TextField(db_column='account_id', verbose_name='Account ID')),
                ('last_reading', models.DecimalField(decimal_places=6, max_digits=20, verbose_name='Last Reading')),
                ('created_at', models.DateTimeField(verbose_name='Created At')),
            ],
            options={
                'verbose_name': 'IOT Meter',
                'verbose_name_plural': 'IOT Meters',
                'db_table': '"public"."iot_meters"',
            },
        ),
        migrations.CreateModel(
            name='IotMeterData',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('dt', models.DateTimeField(verbose_name='DateTime')),
                ('type_of_data', models.TextField(db_column='type_of_data', verbose_name='Data Type')),
                ('rssi', models.IntegerField(verbose_name='RSSI')),
                ('snr', models.DecimalField(decimal_places=6, max_digits=20, verbose_name='SNR')),
                ('num_of_pulse', models.IntegerField(db_column='num_of_pulse', verbose_name='Pulse Count')),
                ('reading', models.DecimalField(decimal_places=6, max_digits=20, verbose_name='Reading')),
                ('data', models.JSONField(verbose_name='Raw Data')),
                ('battery_level', models.DecimalField(db_column='battery_level', decimal_places=6, max_digits=20, verbose_name='Battery Level')),
                ('start_reading', models.DecimalField(db_column='start_reading', decimal_places=6, max_digits=20, verbose_name='Start Reading')),
                ('diff_reading', models.DecimalField(db_column='diff_reading', decimal_places=6, max_digits=20, verbose_name='Difference')),
                ('created_at', models.DateTimeField(verbose_name='Created At')),
                ('meter_id', models.IntegerField(db_column='meter_id', verbose_name='Meter ID')),
            ],
            options={
                'verbose_name': 'IOT Meter Data',
                'verbose_name_plural': 'IOT Meter Data',
                'db_table': '"public"."iot_meter_data"',
            },
        ),
        migrations.CreateModel(
            name='IotModem',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('address_name', models.TextField(verbose_name='Address Name')),
                ('lat', models.DecimalField(decimal_places=6, max_digits=20, verbose_name='Latitude')),
                ('lng', models.DecimalField(decimal_places=6, max_digits=20, verbose_name='Longitude')),
                ('gateway_eui', models.TextField(verbose_name='Gateway EUI')),
                ('type_name', models.TextField(verbose_name='Type Name')),
                ('eui', models.TextField(verbose_name='EUI')),
                ('description', models.TextField(verbose_name='Description')),
                ('sent_date', models.DateTimeField(verbose_name='Sent Date')),
                ('timezone', models.IntegerField(verbose_name='Timezone')),
                ('sending_period', models.IntegerField(verbose_name='Sending Period')),
                ('last_net_server_sync_time', models.DateTimeField(db_column='last_net_server_sync_time', verbose_name='Last Net‑Server Sync')),
                ('is_active', models.BooleanField(verbose_name='Is Active')),
                ('snr', models.DecimalField(decimal_places=6, max_digits=20, verbose_name='SNR')),
                ('rssi', models.DecimalField(decimal_places=6, max_digits=20, verbose_name='RSSI')),
                ('battery_level', models.DecimalField(decimal_places=6, max_digits=20, verbose_name='Battery Level')),
                ('active', models.BooleanField(verbose_name='Active')),
                ('dealer_company', models.TextField(verbose_name='Dealer Company')),
                ('type', models.IntegerField(db_column='type', verbose_name='Type')),
                ('network_server', models.IntegerField(verbose_name='Network Server')),
                ('address', models.IntegerField(verbose_name='Address')),
                ('gateway', models.IntegerField(verbose_name='Gateway')),
                ('node_service_company', models.IntegerField(verbose_name='Node Service Company')),
                ('created_at', models.DateTimeField(verbose_name='Created At')),
            ],
            options={
                'verbose_name': 'IOT Modem',
                'verbose_name_plural': 'IOT Modems',
                'db_table': '"public"."iot_modems"',
            },
        ),
        migrations.CreateModel(
            name='Meter',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('entity', models.CharField(max_length=50)),
                ('punumber', models.CharField(max_length=50, verbose_name='PUNumber')),
                ('readings', models.IntegerField(verbose_name='Readings')),
                ('yearmonth', models.CharField(max_length=6, verbose_name='YearMonth')),
                ('code', models.CharField(max_length=7)),
                ('address', models.CharField(max_length=150)),
                ('location', models.CharField(max_length=2)),
                ('verification_date', models.CharField(max_length=10)),
                ('seal_number', models.CharField(max_length=20)),
                ('bitness', models.IntegerField()),
                ('initial_readings', models.IntegerField(verbose_name='Initial Readings')),
                ('installation_date', models.DateField(verbose_name='Installation Date')),
                ('final_readings', models.IntegerField(verbose_name='Final Readings')),
                ('deinstallation_date', models.DateField(verbose_name='De‑installation Date')),
                ('outter_id', models.CharField(max_length=255, verbose_name='Outer ID')),
                ('erc_meter_id', models.IntegerField(verbose_name='ERC Meter ID')),
                ('bit_depth', models.SmallIntegerField(verbose_name='Bit Depth')),
                ('last_send_date', models.CharField(max_length=16, verbose_name='Last Send Date')),
                ('meter_serial', models.CharField(max_length=50)),
                ('meter_model', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'Meter',
                'verbose_name_plural': 'Meters',
                'db_table': '"public"."meters"',
            },
        ),
        migrations.CreateModel(
            name='MeterUser',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('isactual', models.BooleanField(verbose_name='Is Actual')),
                ('joined', models.DateTimeField(verbose_name='Joined')),
                ('last_logged_in', models.DateTimeField(verbose_name='Last Logged In')),
                ('number', models.CharField(max_length=20)),
                ('type', models.CharField(max_length=10)),
                ('intent', models.CharField(max_length=50)),
                ('intententity', models.CharField(max_length=50)),
                ('intentmeter', models.CharField(max_length=50)),
                ('intentmetercode', models.CharField(max_length=7)),
                ('intentseal', models.CharField(max_length=10)),
                ('name', models.CharField(max_length=100)),
                ('isadmin', models.BooleanField(verbose_name='Is Admin')),
                ('username', models.CharField(max_length=50)),
                ('phone', models.CharField(max_length=20)),
                ('lang', models.CharField(max_length=10)),
                ('return_menu', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name': 'Meter User',
                'verbose_name_plural': 'Meter Users',
                'db_table': '"public"."users"',
            },
        ),
        migrations.CreateModel(
            name='MigrationData',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('entity_id', models.CharField(db_column='entity_id', max_length=20)),
                ('surname', models.CharField(max_length=255)),
                ('given_name', models.CharField(max_length=255)),
                ('fathers_name', models.CharField(max_length=255)),
                ('street_group', models.CharField(max_length=64)),
                ('street_prefix', models.CharField(max_length=64)),
                ('street_name', models.CharField(max_length=255)),
                ('house_type', models.CharField(max_length=64)),
                ('house_number', models.CharField(max_length=64)),
                ('house_literal', models.CharField(max_length=64)),
                ('flat_number', models.CharField(max_length=64)),
                ('flat_postfix', models.CharField(max_length=64)),
                ('meter_type', models.CharField(max_length=64)),
                ('meter_model', models.CharField(max_length=64)),
                ('meter_number', models.CharField(max_length=64)),
                ('verification_date', models.CharField(max_length=20)),
                ('send_date', models.CharField(max_length=20)),
                ('readings', models.CharField(max_length=20)),
                ('sector', models.CharField(max_length=20)),
            ],
            options={
                'verbose_name': 'Migration Data',
                'verbose_name_plural': 'Migration Data',
                'db_table': '"public"."migration_data"',
            },
        ),
        migrations.CreateModel(
            name='ReadingsSU',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('abonent_id', models.IntegerField(verbose_name='Abonent ID')),
                ('account_id', models.IntegerField(verbose_name='Account ID')),
                ('point_num', models.IntegerField(verbose_name='PointNum')),
                ('rdate', models.DateField(verbose_name='RDate')),
                ('rvalue', models.DecimalField(decimal_places=3, max_digits=12, verbose_name='RValue')),
                ('meter_id', models.IntegerField(verbose_name='Meter ID')),
            ],
            options={
                'verbose_name': 'Readings_SU',
                'verbose_name_plural': 'Readings_SU',
                'db_table': '"public"."readings_su"',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, verbose_name='Название роли')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
            ],
            options={
                'verbose_name': 'Роль',
                'verbose_name_plural': 'Роли',
                'db_table': '"portal"."roles"',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Sector',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=3)),
                ('pass_field', models.CharField(db_column='pass', max_length=10)),
                ('begindate', models.DateTimeField(db_column='begindate')),
                ('enddate', models.DateTimeField(db_column='enddate')),
                ('isactual', models.BooleanField()),
                ('code', models.CharField(max_length=255)),
                ('mode', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name': 'Sector',
                'verbose_name_plural': 'Sectors',
                'db_table': '"public"."sectors"',
            },
        ),
        migrations.CreateModel(
            name='Setting',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('email', models.CharField(max_length=500)),
                ('createdate', models.DateTimeField()),
                ('curyearmonth', models.CharField(max_length=6)),
                ('email1', models.CharField(max_length=255)),
                ('ivcemail', models.CharField(max_length=50)),
                ('dirmail', models.CharField(max_length=50)),
                ('meteryearmonth', models.CharField(db_column='meteryearmonth', max_length=6)),
                ('meteryearmonthelec', models.CharField(db_column='meteryearmonthelec', max_length=6)),
                ('ivcemail2', models.CharField(max_length=255)),
                ('bank_year_month', models.CharField(db_column='bank_year_month', max_length=255)),
                ('poliv_email', models.CharField(db_column='poliv_email', max_length=255)),
                ('water_email', models.CharField(db_column='water_email', max_length=255)),
                ('ee_email', models.CharField(db_column='ee_email', max_length=255)),
            ],
            options={
                'verbose_name': 'Setting',
                'verbose_name_plural': 'Settings',
                'db_table': '"public"."settings"',
            },
        ),
        migrations.CreateModel(
            name='Street',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name': 'Street',
                'verbose_name_plural': 'Streets',
                'db_table': '"public"."streets"',
            },
        ),
        migrations.CreateModel(
            name='User_meter',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=255, verbose_name='Логин')),
                ('email', models.CharField(max_length=255, verbose_name='Email')),
                ('password', models.CharField(max_length=255, verbose_name='Пароль')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'db_table': '"portal"."meter_users"',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='YourTableName',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('rso_name', models.CharField(max_length=255)),
                ('contract_num', models.CharField(max_length=255)),
                ('contract_date', models.DateField()),
                ('consumer', models.CharField(max_length=255)),
                ('district', models.CharField(max_length=255)),
                ('town', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name': 'Your Table',
                'verbose_name_plural': 'Your Tables',
                'db_table': '"public"."your_table_name"',
            },
        ),
        migrations.CreateModel(
            name='Seal',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('txt', models.CharField(max_length=500)),
                ('createdate', models.DateTimeField()),
                ('type', models.CharField(max_length=10)),
                ('entity', models.CharField(max_length=255)),
                ('phone', models.CharField(max_length=20)),
                ('status', models.CharField(max_length=10)),
                ('ishot', models.BooleanField()),
                ('iscold', models.BooleanField()),
                ('iselect', models.BooleanField()),
                ('operatorid', models.IntegerField(db_column='operatorid')),
                ('verificationcode', models.CharField(max_length=50)),
                ('verificationphone', models.CharField(max_length=12)),
                ('aktnumber', models.CharField(max_length=50)),
                ('scheduledate', models.DateField()),
                ('answer', models.CharField(blank=True, max_length=255, null=True)),
                ('answer_date', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(db_column='userid', on_delete=django.db.models.deletion.CASCADE, related_name='seals', to='meter_app.meteruser')),
            ],
            options={
                'verbose_name': 'Seal',
                'verbose_name_plural': 'Seals',
                'db_table': '"public"."seals"',
            },
        ),
        migrations.CreateModel(
            name='Reading',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('entity', models.CharField(max_length=50)),
                ('punumber', models.CharField(max_length=50)),
                ('readings', models.DecimalField(decimal_places=3, max_digits=12)),
                ('createdate', models.DateTimeField()),
                ('code', models.CharField(max_length=7)),
                ('disabled', models.BooleanField()),
                ('meterid', models.IntegerField(db_column='meterid')),
                ('disconnected', models.BooleanField()),
                ('corrected', models.BooleanField()),
                ('isactual', models.BooleanField()),
                ('sourcecode', models.CharField(max_length=10)),
                ('yearmonth', models.CharField(max_length=6)),
                ('restricted', models.BooleanField()),
                ('consumption', models.IntegerField()),
                ('operator_id', models.IntegerField(db_column='operatorid')),
                ('erc_meter_id', models.BigIntegerField(db_column='erc_meter_id')),
                ('reading2', models.DecimalField(db_column='reading2', decimal_places=3, max_digits=10)),
                ('user', models.ForeignKey(db_column='userid', on_delete=django.db.models.deletion.CASCADE, related_name='readings', to='meter_app.meteruser')),
            ],
            options={
                'verbose_name': 'Reading',
                'verbose_name_plural': 'Readings',
                'db_table': '"public"."readings"',
            },
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('txt', models.CharField(max_length=500)),
                ('createdate', models.DateTimeField()),
                ('type', models.CharField(max_length=10)),
                ('entity', models.CharField(max_length=50)),
                ('phone', models.CharField(max_length=20)),
                ('status', models.CharField(max_length=10)),
                ('ishot', models.BooleanField()),
                ('iscold', models.BooleanField()),
                ('iselect', models.BooleanField()),
                ('operatorid', models.IntegerField(db_column='operatorid')),
                ('verificationcode', models.CharField(max_length=50)),
                ('verificationphone', models.CharField(max_length=12)),
                ('aktnumber', models.CharField(max_length=50)),
                ('scheduledate', models.DateField()),
                ('answer', models.CharField(blank=True, max_length=255, null=True)),
                ('answer_date', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(db_column='userid', on_delete=django.db.models.deletion.CASCADE, related_name='feedbacks', to='meter_app.meteruser')),
            ],
            options={
                'verbose_name': 'Feedback',
                'verbose_name_plural': 'Feedbacks',
                'db_table': '"public"."feedbacks"',
            },
        ),
        migrations.CreateModel(
            name='Entity',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('entity', models.CharField(max_length=50)),
                ('amount', models.CharField(max_length=50)),
                ('address', models.CharField(max_length=150)),
                ('house', models.CharField(max_length=64)),
                ('flat', models.CharField(max_length=64)),
                ('sector', models.CharField(max_length=3)),
                ('addressid', models.IntegerField(db_column='addressid')),
                ('city', models.CharField(max_length=20)),
                ('type', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('coefficient', models.SmallIntegerField()),
                ('team', models.SmallIntegerField()),
                ('tur', models.SmallIntegerField()),
                ('street', models.ForeignKey(db_column='street_id', on_delete=django.db.models.deletion.CASCADE, related_name='entities', to='meter_app.street', verbose_name='Street')),
            ],
            options={
                'verbose_name': 'Entity',
                'verbose_name_plural': 'Entities',
                'db_table': '"public"."entities"',
            },
        ),
        migrations.CreateModel(
            name='UserRoles',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, null=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(blank=True, null=True, verbose_name='Обновлено')),
                ('role', models.ForeignKey(db_column='role_id', on_delete=django.db.models.deletion.CASCADE, related_name='user_links', to='meter_app.role', verbose_name='Роль')),
                ('user', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, related_name='role_links', to='meter_app.user_meter', verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Связь пользователь–роль',
                'verbose_name_plural': 'Связи пользователь–роль',
                'db_table': '"portal"."user_roles"',
                'managed': True,
                'unique_together': {('user', 'role')},
            },
        ),
    ]
