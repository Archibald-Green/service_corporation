# Generated by Django 4.2.5 on 2025-04-19 13:39

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('userid', models.IntegerField(db_column='userid', verbose_name='User ID')),
                ('entity', models.CharField(max_length=50, verbose_name='Entity')),
                ('isdeleted', models.BooleanField(verbose_name='Is Deleted')),
            ],
            options={
                'verbose_name': 'Account',
                'verbose_name_plural': 'Accounts',
                'db_table': '"public"."accounts"',
            },
        ),
        migrations.CreateModel(
            name='EnergoDevice',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('ctime', models.DateTimeField(verbose_name='Ctime')),
                ('dmodel_id', models.IntegerField(verbose_name='Model ID')),
                ('dmodel_sensor', models.CharField(max_length=255, verbose_name='Sensor Model')),
                ('serial_num', models.CharField(max_length=255, verbose_name='Serial Number')),
                ('device_id', models.IntegerField(verbose_name='Device ID')),
                ('folder_id', models.IntegerField(verbose_name='Folder ID')),
                ('location', models.CharField(max_length=255, verbose_name='Location')),
                ('physical_person', models.BooleanField(verbose_name='Physical Person')),
                ('owner_name', models.CharField(max_length=255, verbose_name='Owner Name')),
                ('beg_value', models.DecimalField(decimal_places=6, max_digits=20, verbose_name='Beginning Value')),
                ('phones', models.CharField(max_length=255, verbose_name='Phones')),
                ('sector_id', models.IntegerField(verbose_name='Sector ID')),
                ('mount_id', models.IntegerField(verbose_name='Mount ID')),
                ('mount', models.CharField(max_length=255, verbose_name='Mount')),
                ('archives', models.IntegerField(verbose_name='Archives')),
                ('alias', models.CharField(max_length=255, verbose_name='Alias')),
                ('enable', models.BooleanField(verbose_name='Enabled')),
                ('resource_id', models.IntegerField(verbose_name='Resource ID')),
                ('resource_inx', models.IntegerField(verbose_name='Resource Index')),
                ('scheme_id', models.IntegerField(verbose_name='Scheme ID')),
                ('dscan', models.CharField(max_length=255, verbose_name='DScan')),
                ('calc', models.CharField(max_length=255, verbose_name='Calc')),
                ('account', models.CharField(max_length=255, verbose_name='Account')),
                ('date_next', models.DateField(blank=True, null=True, verbose_name='Next Date')),
                ('date_verification', models.DateField(blank=True, null=True, verbose_name='Verification Date')),
                ('c', models.IntegerField(blank=True, null=True, verbose_name='C')),
                ('dpu', models.CharField(max_length=255, verbose_name='DPU')),
                ('position_vertical', models.CharField(max_length=255, verbose_name='Position Vertical')),
                ('owner_device', models.CharField(max_length=255, verbose_name='Owner Device')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
            ],
            options={
                'verbose_name': 'Energo Device',
                'verbose_name_plural': 'Energo Devices',
                'db_table': '"public"."energo_devices"',
            },
        ),
        migrations.CreateModel(
            name='EnergoDeviceData',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('value', models.DecimalField(decimal_places=6, max_digits=20, verbose_name='Value')),
                ('value_error', models.DecimalField(blank=True, decimal_places=6, max_digits=20, null=True, verbose_name='Value Error')),
                ('rvalue_id', models.IntegerField(verbose_name='RValue ID')),
                ('c', models.IntegerField(blank=True, null=True, verbose_name='C')),
                ('ctime', models.DateTimeField(verbose_name='Ctime')),
                ('datetime', models.DateTimeField(verbose_name='Datetime')),
                ('type_arch_orig', models.IntegerField(verbose_name='Original Archive Type')),
                ('type_arch', models.IntegerField(verbose_name='Archive Type')),
                ('success', models.BooleanField(verbose_name='Success')),
                ('error_arch', models.TextField(blank=True, null=True, verbose_name='Error Archive')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('device_id', models.IntegerField(verbose_name='Device ID')),
            ],
            options={
                'verbose_name': 'Energo Device Data',
                'verbose_name_plural': 'Energo Device Data',
                'db_table': '"public"."energo_device_data"',
            },
        ),
        migrations.CreateModel(
            name='EnergoFolder',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('rso_name', models.CharField(max_length=255)),
                ('contract_num', models.CharField(max_length=255)),
                ('contract_date', models.DateField()),
                ('consumer', models.CharField(max_length=255)),
                ('district', models.CharField(max_length=255)),
                ('town', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Energo Folder',
                'verbose_name_plural': 'Energo Folders',
                'db_table': '"public"."energo_folders"',
            },
        ),
        migrations.CreateModel(
            name='ErcData',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('abonent', models.CharField(max_length=64)),
                ('entity', models.CharField(max_length=64)),
                ('surname', models.CharField(max_length=64)),
                ('given_name', models.CharField(max_length=64)),
                ('fathers_name', models.CharField(max_length=64)),
                ('entity_gar_su', models.CharField(max_length=64)),
                ('entity_type', models.CharField(max_length=64)),
                ('sector', models.CharField(max_length=64)),
                ('team', models.CharField(max_length=64)),
                ('city', models.CharField(max_length=64)),
                ('street_group', models.CharField(max_length=64)),
                ('street_prefix', models.CharField(max_length=64)),
                ('street', models.CharField(max_length=64)),
                ('house_prefix', models.CharField(max_length=64)),
                ('house_type', models.CharField(max_length=64)),
                ('house_number', models.CharField(max_length=64)),
                ('litera', models.CharField(max_length=64)),
                ('flat', models.CharField(max_length=64)),
                ('flat_test', models.CharField(max_length=64)),
                ('flat_type', models.CharField(max_length=64)),
                ('object', models.CharField(db_column='object', max_length=64)),
                ('registered_amount', models.CharField(max_length=64)),
                ('floor', models.CharField(max_length=64)),
                ('phone_number1', models.CharField(max_length=64)),
                ('phone_number2', models.CharField(max_length=64)),
                ('iin', models.CharField(max_length=64)),
                ('whaelthy_code', models.CharField(max_length=64)),
                ('tarif_type', models.CharField(max_length=64)),
                ('tarif_water', models.CharField(max_length=64)),
                ('tarif_saverage', models.CharField(max_length=64)),
                ('tu', models.CharField(max_length=64)),
                ('meter_type', models.CharField(max_length=64)),
                ('meter_subtype', models.CharField(max_length=64)),
                ('meter_number', models.CharField(max_length=64)),
                ('verification_date', models.CharField(max_length=64)),
                ('readings_date', models.CharField(max_length=64)),
                ('readings', models.CharField(max_length=64)),
                ('norma', models.CharField(max_length=64)),
                ('test1', models.CharField(max_length=64)),
                ('test2', models.CharField(max_length=64)),
                ('area', models.CharField(max_length=64)),
                ('area_type', models.CharField(max_length=64)),
                ('seal_date', models.CharField(max_length=64)),
                ('seal_number', models.CharField(max_length=64)),
                ('source', models.CharField(max_length=64)),
                ('poliv', models.CharField(max_length=64)),
                ('tu_saverage', models.CharField(max_length=64)),
                ('saverage_type', models.CharField(max_length=64)),
                ('start_date', models.CharField(max_length=64)),
                ('meter_id', models.CharField(max_length=64)),
                ('blank_number', models.CharField(max_length=64)),
                ('tur', models.CharField(max_length=64)),
                ('bit_depth', models.CharField(max_length=64)),
                ('reagings_date', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'ERC Data',
                'verbose_name_plural': 'ERC Data',
                'db_table': '"public"."erc_data"',
            },
        ),
        migrations.CreateModel(
            name='ErcData1',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('abonent', models.CharField(max_length=64)),
                ('entity', models.CharField(max_length=64)),
                ('surname', models.CharField(max_length=64)),
                ('given_name', models.CharField(max_length=64)),
                ('fathers_name', models.CharField(max_length=64)),
                ('entity_gar_su', models.CharField(max_length=64)),
                ('entity_type', models.CharField(max_length=64)),
                ('sector', models.CharField(max_length=64)),
                ('team', models.CharField(max_length=64)),
                ('city', models.CharField(max_length=64)),
                ('street_group', models.CharField(max_length=64)),
                ('street_prefix', models.CharField(max_length=64)),
                ('street', models.CharField(max_length=64)),
                ('house_prefix', models.CharField(max_length=64)),
                ('house_type', models.CharField(max_length=64)),
                ('house_number', models.CharField(max_length=64)),
                ('litera', models.CharField(max_length=64)),
                ('flat', models.CharField(max_length=64)),
                ('flat_test', models.CharField(max_length=64)),
                ('flat_type', models.CharField(max_length=64)),
                ('object', models.CharField(db_column='object', max_length=64)),
                ('registered_amount', models.CharField(max_length=64)),
                ('floor', models.CharField(max_length=64)),
                ('phone_number1', models.CharField(max_length=64)),
                ('phone_number2', models.CharField(max_length=64)),
                ('iin', models.CharField(max_length=64)),
                ('whaelthy_code', models.CharField(max_length=64)),
                ('tarif_type', models.CharField(max_length=64)),
                ('tarif_water', models.CharField(max_length=64)),
                ('tarif_saverage', models.CharField(max_length=64)),
                ('tu', models.CharField(max_length=64)),
                ('meter_type', models.CharField(max_length=64)),
                ('meter_subtype', models.CharField(max_length=64)),
                ('meter_number', models.CharField(max_length=64)),
                ('verification_date', models.CharField(max_length=64)),
                ('readings_date', models.CharField(max_length=64)),
                ('norma', models.CharField(max_length=64)),
                ('test1', models.CharField(max_length=64)),
                ('test2', models.CharField(max_length=64)),
                ('area', models.CharField(max_length=64)),
                ('area_type', models.CharField(max_length=64)),
                ('seal_date', models.CharField(max_length=64)),
                ('seal_number', models.CharField(max_length=64)),
                ('source', models.CharField(max_length=64)),
                ('poliv', models.CharField(max_length=64)),
                ('tu_saverage', models.CharField(max_length=64)),
                ('saverage_type', models.CharField(max_length=64)),
                ('start_date', models.CharField(max_length=64)),
                ('meter_id', models.CharField(max_length=64)),
                ('blank_number', models.CharField(max_length=64)),
                ('tur', models.CharField(max_length=64)),
                ('bit_depth', models.CharField(max_length=64)),
            ],
            options={
                'verbose_name': 'ERC Data 1',
                'verbose_name_plural': 'ERC Data 1',
                'db_table': '"public"."erc_data1"',
            },
        ),
        migrations.CreateModel(
            name='ErcData2',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('abonent', models.CharField(max_length=64)),
                ('entity', models.CharField(max_length=64)),
                ('surname', models.CharField(max_length=64)),
                ('given_name', models.CharField(max_length=64)),
                ('fathers_name', models.CharField(max_length=64)),
                ('entity_gar_su', models.CharField(max_length=64)),
                ('entity_type', models.CharField(max_length=64)),
                ('sector', models.CharField(max_length=64)),
                ('team', models.CharField(max_length=64)),
                ('city', models.CharField(max_length=64)),
                ('street_group', models.CharField(max_length=64)),
                ('street_prefix', models.CharField(max_length=64)),
                ('street', models.CharField(max_length=64)),
                ('house_prefix', models.CharField(max_length=64)),
                ('house_type', models.CharField(max_length=64)),
                ('house_number', models.CharField(max_length=64)),
                ('litera', models.CharField(max_length=64)),
                ('flat', models.CharField(max_length=64)),
                ('flat_test', models.CharField(max_length=64)),
                ('flat_type', models.CharField(max_length=64)),
                ('object', models.CharField(db_column='object', max_length=64)),
                ('registered_amount', models.CharField(max_length=64)),
                ('floor', models.CharField(max_length=64)),
                ('phone_number1', models.CharField(max_length=64)),
                ('phone_number2', models.CharField(max_length=64)),
                ('iin', models.CharField(max_length=64)),
                ('whaelthy_code', models.CharField(max_length=64)),
                ('tarif_type', models.CharField(max_length=64)),
                ('tarif_water', models.CharField(max_length=64)),
                ('tarif_saverage', models.CharField(max_length=64)),
                ('tu', models.CharField(max_length=64)),
                ('meter_type', models.CharField(max_length=64)),
                ('meter_subtype', models.CharField(max_length=64)),
                ('meter_number', models.CharField(max_length=64)),
                ('verification_date', models.CharField(max_length=64)),
                ('readings_date', models.CharField(max_length=64)),
                ('readings', models.CharField(max_length=64)),
                ('norma', models.CharField(max_length=64)),
                ('test1', models.CharField(max_length=64)),
                ('test2', models.CharField(max_length=64)),
                ('area', models.CharField(max_length=64)),
                ('area_type', models.CharField(max_length=64)),
                ('seal_date', models.CharField(max_length=64)),
                ('seal_number', models.CharField(max_length=64)),
                ('source', models.CharField(max_length=64)),
                ('poliv', models.CharField(max_length=64)),
                ('tu_saverage', models.CharField(max_length=64)),
                ('saverage_type', models.CharField(max_length=64)),
                ('start_date', models.CharField(max_length=64)),
                ('meter_id', models.CharField(max_length=64)),
                ('blank_number', models.CharField(max_length=64)),
                ('tur', models.CharField(max_length=64)),
                ('bit_depth', models.CharField(max_length=64)),
            ],
            options={
                'verbose_name': 'ERC Data 2',
                'verbose_name_plural': 'ERC Data 2',
                'db_table': '"public"."erc_data2"',
            },
        ),
        migrations.CreateModel(
            name='MeterUser',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('isactual', models.BooleanField(verbose_name='Is Actual')),
                ('joined', models.DateTimeField(verbose_name='Joined')),
                ('last_logged_in', models.DateTimeField(verbose_name='Last Logged In')),
                ('number', models.CharField(max_length=20)),
                ('type', models.CharField(max_length=10)),
                ('intent', models.CharField(max_length=50)),
                ('intententity', models.CharField(max_length=50)),
                ('intentmeter', models.CharField(max_length=50)),
                ('intentmetercode', models.CharField(max_length=7)),
                ('intentseal', models.CharField(max_length=10)),
                ('name', models.CharField(max_length=100)),
                ('isadmin', models.BooleanField(verbose_name='Is Admin')),
                ('username', models.CharField(max_length=50)),
                ('phone', models.CharField(max_length=20)),
                ('lang', models.CharField(max_length=10)),
                ('return_menu', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name': 'Meter User',
                'verbose_name_plural': 'Meter Users',
                'db_table': '"public"."users"',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, verbose_name='Название роли')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
            ],
            options={
                'verbose_name': 'Роль',
                'verbose_name_plural': 'Роли',
                'db_table': '"portal"."roles"',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Street',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name': 'Street',
                'verbose_name_plural': 'Streets',
                'db_table': '"public"."streets"',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=255, verbose_name='Логин')),
                ('email', models.CharField(max_length=255, verbose_name='Email')),
                ('password', models.CharField(max_length=255, verbose_name='Пароль')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'db_table': '"portal"."users"',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('txt', models.CharField(max_length=500)),
                ('createdate', models.DateTimeField()),
                ('type', models.CharField(max_length=10)),
                ('entity', models.CharField(max_length=50)),
                ('phone', models.CharField(max_length=20)),
                ('status', models.CharField(max_length=10)),
                ('ishot', models.BooleanField()),
                ('iscold', models.BooleanField()),
                ('iselect', models.BooleanField()),
                ('operatorid', models.IntegerField(db_column='operatorid')),
                ('verificationcode', models.CharField(max_length=50)),
                ('verificationphone', models.CharField(max_length=12)),
                ('aktnumber', models.CharField(max_length=50)),
                ('scheduledate', models.DateField()),
                ('answer', models.CharField(blank=True, max_length=255, null=True)),
                ('answer_date', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(db_column='userid', on_delete=django.db.models.deletion.CASCADE, related_name='feedbacks', to='meter_app.meteruser')),
            ],
            options={
                'verbose_name': 'Feedback',
                'verbose_name_plural': 'Feedbacks',
                'db_table': '"public"."feedbacks"',
            },
        ),
        migrations.CreateModel(
            name='Entity',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('entity', models.CharField(max_length=50)),
                ('amount', models.CharField(max_length=50)),
                ('address', models.CharField(max_length=150)),
                ('house', models.CharField(max_length=64)),
                ('flat', models.CharField(max_length=64)),
                ('sector', models.CharField(max_length=3)),
                ('addressid', models.IntegerField(db_column='addressid')),
                ('city', models.CharField(max_length=20)),
                ('type', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('coefficient', models.SmallIntegerField()),
                ('team', models.SmallIntegerField()),
                ('tur', models.SmallIntegerField()),
                ('street', models.ForeignKey(db_column='street_id', on_delete=django.db.models.deletion.CASCADE, related_name='entities', to='meter_app.street', verbose_name='Street')),
            ],
            options={
                'verbose_name': 'Entity',
                'verbose_name_plural': 'Entities',
                'db_table': '"public"."entities"',
            },
        ),
        migrations.CreateModel(
            name='UserRoles',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, null=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(blank=True, null=True, verbose_name='Обновлено')),
                ('role', models.ForeignKey(db_column='role_id', on_delete=django.db.models.deletion.CASCADE, related_name='user_links', to='meter_app.role', verbose_name='Роль')),
                ('user', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, related_name='role_links', to='meter_app.user', verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Связь пользователь–роль',
                'verbose_name_plural': 'Связи пользователь–роль',
                'db_table': '"portal"."user_roles"',
                'managed': True,
                'unique_together': {('user', 'role')},
            },
        ),
    ]
