# bots_app/management/commands/run_controller_bot.py

import os
from functools import wraps
from datetime import date, timedelta

from django.core.management.base import BaseCommand
from django.utils import timezone
from asgiref.sync import sync_to_async

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    ApplicationBuilder,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    filters,
    ContextTypes
)

from bots_app.creds.botTOKENS import telegraim_api_cont
from meter_app.models import Controller, MeterUser, Address, UserArea, Seal, Reading

# ‚Äî‚Äî‚Äî —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM ‚Äî‚Äî‚Äî
(
    AUTH_LOGIN,
    AUTH_PASSWORD,
    SELECT_LANG,
    MAIN_MENU,
    INPUT_READ_LS,
    INPUT_COLD,
    INPUT_HOT,
    INPUT_SEAL_LS,
    INPUT_SEAL_REASON,
    INPUT_SEAL_TYPE,
    INPUT_SEAL_DATE,
    INPUT_SEAL_SLOT,
) = range(12)


def login_markup():
    return ReplyKeyboardMarkup(
        [["üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è"]],
        resize_keyboard=True,
        one_time_keyboard=True
    )


def lang_markup():
    return ReplyKeyboardMarkup(
        [["–†—É—Å—Å–∫–∏–π", "“ö–∞–∑–∞“õ—à–∞"]],
        resize_keyboard=True,
        one_time_keyboard=True
    )


def main_menu_markup(lang="ru"):
    if lang == "kz":
        return ReplyKeyboardMarkup([
            ["üíß –ö”©—Ä—Å–µ—Ç–∫—ñ—à—Ç–µ—Ä", "üìù –ü–ª–æ–º–±–∞"],
            ["üìã –ë–∞—Ä–ª—ã“õ –õ–° –∞–π–º–∞“ì—ã"],
            ["üîÑ –¢—ñ–ª–¥—ñ –∞—É—ã—Å—Ç—ã—Ä—É", "üö™ –®—ã“ì—É"],
        ], resize_keyboard=True)
    else:
        return ReplyKeyboardMarkup([
            ["üíß –ü–æ–∫–∞–∑–∞–Ω–∏—è –≤–æ–¥—ã", "üìù –û–ø–ª–æ–º–±–∏—Ä–æ–≤–∞–Ω–∏–µ"],
            ["üìã –í—Å–µ –õ–° —Ä–∞–π–æ–Ω–∞"],
            ["üîÑ –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", "üö™ –í—ã–π—Ç–∏"],
        ], resize_keyboard=True)


def login_required(func):
    @wraps(func)
    async def wrapped(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
        if "controller_id" not in ctx.user_data:
            await update.message.reply_text(
                "‚ùó –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å:",
                reply_markup=login_markup()
            )
            return AUTH_LOGIN
        return await func(update, ctx)
    return wrapped


class Command(BaseCommand):
    help = "–ó–∞–ø—É—Å—Ç–∏—Ç—å Telegram-–±–æ—Ç–∞ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—ë—Ä–æ–≤"

    def handle(self, *args, **options):
        app = ApplicationBuilder().token(telegraim_api_cont).build()

        conv = ConversationHandler(
            entry_points=[
                # –õ—é–±–æ–π –≤—Ö–æ–¥—è—â–∏–π —Ç–µ–∫—Å—Ç –¥–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ‚Äî —É–≤–æ–¥–∏—Ç –≤ AUTH_LOGIN
                MessageHandler(filters.ALL, start),
            ],
            states={
                AUTH_LOGIN: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, auth_login),
                ],
                AUTH_PASSWORD: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, auth_password),
                ],
                SELECT_LANG: [
                    MessageHandler(filters.Regex("^(–†—É—Å—Å–∫–∏–π|“ö–∞–∑–∞“õ—à–∞)$"), set_lang),
                    MessageHandler(filters.ALL, fallback_to_menu),
                ],
                MAIN_MENU: [
                    MessageHandler(filters.Regex("^(üíß|–ö”©—Ä—Å–µ—Ç–∫—ñ—à—Ç–µ—Ä)"), menu_readings),
                    MessageHandler(filters.Regex("^(üìù|–ü–ª–æ–º–±–∞)"), menu_seals),
                    MessageHandler(filters.Regex("^(üìã)"), show_all_ls),
                    MessageHandler(filters.Regex(r"^(üîÑ\s*–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫|üîÑ\s*–¢—ñ–ª–¥—ñ –∞—É—ã—Å—Ç—ã—Ä—É)$"), choose_language),
                    MessageHandler(filters.Regex(r"^üîÑ –¢—ñ–ª–¥—ñ –∞—É—ã—Å—Ç—ã—Ä—É$"), choose_language),
                    MessageHandler(filters.Regex("^(üö™|–í—ã–π—Ç–∏|–®—ã“ì—É)$"), cancel),
                    MessageHandler(filters.ALL, fallback_to_menu),
                ],
                INPUT_READ_LS: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, read_ls),
                    MessageHandler(filters.ALL, fallback_to_menu),
                ],
                INPUT_COLD: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, read_cold),
                    MessageHandler(filters.ALL, fallback_to_menu),
                ],
                INPUT_HOT: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, read_hot),
                    MessageHandler(filters.ALL, fallback_to_menu),
                ],
                INPUT_SEAL_LS: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, seal_ls),
                    MessageHandler(filters.ALL, fallback_to_menu),
                ],
                INPUT_SEAL_REASON: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, seal_reason),
                    MessageHandler(filters.ALL, fallback_to_menu),
                ],
                INPUT_SEAL_TYPE: [
                    MessageHandler(filters.Regex("^(–•–æ–ª–æ–¥–Ω–∞—è|–ì–æ—Ä—è—á–∞—è)$"), seal_type),
                    MessageHandler(filters.ALL, fallback_to_menu),
                ],
                INPUT_SEAL_DATE: [
                    CallbackQueryHandler(process_seal_date, pattern=r"^seal_date:"),
                    MessageHandler(filters.ALL, fallback_to_menu),
                ],
                INPUT_SEAL_SLOT: [
                    CallbackQueryHandler(process_seal_slot, pattern=r"^slot:"),
                    MessageHandler(filters.ALL, fallback_to_menu),
                ],
            },
            fallbacks=[MessageHandler(filters.Command("cancel"), cancel)],
            per_message=False,
        )

        app.add_handler(conv)
        app.run_polling()


# ‚Äî‚Äî‚Äî fallback –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é ‚Äî‚Äî‚Äî
async def fallback_to_menu(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    lang = ctx.user_data.get("lang", "ru")
    await update.message.reply_text(
        "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥, –≤–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=main_menu_markup(lang)
    )
    return MAIN_MENU


# ‚Äî‚Äî‚Äî —Ö–µ–Ω–¥–ª–µ—Ä—ã ‚Äî‚Äî‚Äî

async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    ctx.user_data.clear()
    await update.message.reply_text(
        "üîê –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å:",
        reply_markup=login_markup()
    )
    return AUTH_LOGIN


async def auth_login(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    # –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
    if text == "üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è":
        await update.message.reply_text(
            "üîê –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å:",
            reply_markup=login_markup()
        )
        return AUTH_LOGIN

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–Ω
    try:
        ctrl = await sync_to_async(Controller.objects.using("meter").get)(username=text)
    except Controller.DoesNotExist:
        await update.message.reply_text("‚ùå –õ–æ–≥–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return AUTH_LOGIN

    ctx.user_data["controller_id"] = ctrl.id
    ctx.user_data["area_id"]       = ctrl.area_id

    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    return AUTH_PASSWORD


async def auth_password(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    pwd = update.message.text.strip()
    cid = ctx.user_data["controller_id"]
    try:
        await sync_to_async(Controller.objects.using("meter").get)(id=cid, password=pwd)
    except Controller.DoesNotExist:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return AUTH_PASSWORD

    # –ø–æ—Å–ª–µ –ø–∞—Ä–æ–ª—è —Å—Ä–∞–∑—É –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:", reply_markup=lang_markup()
    )
    return SELECT_LANG


async def set_lang(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text.strip()
    lang = "kz" if choice == "“ö–∞–∑–∞“õ—à–∞" else "ru"
    ctx.user_data["lang"] = lang

    welcome = "‚úÖ –£—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏! –ß—Ç–æ –¥–∞–ª—å—à–µ?" if lang=="ru" else "‚úÖ –°”ô—Ç—Ç—ñ –∫—ñ—Ä–¥—ñ“£—ñ–∑! –ö–µ–ª–µ—Å—ñ “õ–∞–¥–∞–º–¥—ã —Ç–∞“£–¥–∞“£—ã–∑:"
    await update.message.reply_text(welcome, reply_markup=main_menu_markup(lang))
    return MAIN_MENU

@login_required
async def choose_language(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    # —Å–º–µ–Ω–∞ —è–∑—ã–∫–∞ –∏–∑ –º–µ–Ω—é
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:", reply_markup=lang_markup())
    return SELECT_LANG


@login_required
async def show_all_ls(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    lang = ctx.user_data.get("lang", "ru")
    area = ctx.user_data["area_id"]
    uas = await sync_to_async(list)(
        UserArea.objects.using("meter")
            .filter(area_id=area)
            .select_related("user__address")
    )
    if not uas:
        msg = lang=="kz" and "–ê–π–º–∞“õ—Ç–∞ –∞–±–æ–Ω–µ–Ω—Ç—Ç–µ—Ä –∂–æ“õ." or "–í –≤–∞—à–µ–º —Ä–∞–π–æ–Ω–µ –µ—â—ë –Ω–µ—Ç –∞–±–æ–Ω–µ–Ω—Ç–æ–≤."
        await update.message.reply_text(msg)
    else:
        lines = []
        for ua in uas:
            mu = ua.user
            try:
                a = mu.address
                addr = f"{a.street}, –¥. {a.building}"
                if a.apartment:
                    addr += f", –∫–≤. {a.apartment}"
            except Address.DoesNotExist:
                addr = lang=="kz" and "–º–µ–∫–µ–Ω–∂–∞–π –∂–æ“õ" or "–∞–¥—Ä–µ—Å –Ω–µ –∑–∞–¥–∞–Ω"
            lines.append(f"{mu.number} ‚Äî {addr}")
        header = lang=="kz" and "üìã –ë–∞—Ä–ª—ã“õ –õ–° –∞–π–º–∞“ì—ã:" or "üìã –í—Å–µ –õ–° —Ä–∞–π–æ–Ω–∞:"
        await update.message.reply_text(header + "\n" + "\n".join(lines))

    prompt = lang=="kz" and "–ö–µ–ª–µ—Å—ñ?" or "–ß—Ç–æ –¥–∞–ª—å—à–µ?"
    await update.message.reply_text(prompt, reply_markup=main_menu_markup(lang))
    return MAIN_MENU


# ‚Äî‚Äî‚Äî –ü–æ–∫–∞–∑–∞–Ω–∏—è –≤–æ–¥—ã ‚Äî‚Äî‚Äî

@login_required
async def menu_readings(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    lang = ctx.user_data.get("lang", "ru")
    area = ctx.user_data["area_id"]
    uas = await sync_to_async(list)(
        UserArea.objects.using("meter")
            .filter(area_id=area)
            .select_related("user")
    )
    if not uas:
        await update.message.reply_text(
            lang=="kz" and "–ê–π–º–∞“õ—Ç–∞ –∞–±–æ–Ω–µ–Ω—Ç—Ç–µ—Ä –∂–æ“õ." or "–í –≤–∞—à–µ–º —Ä–∞–π–æ–Ω–µ –Ω–µ—Ç –∞–±–æ–Ω–µ–Ω—Ç–æ–≤.",
            reply_markup=main_menu_markup(lang)
        )
        return MAIN_MENU

    nums = [ua.user.number for ua in uas]
    prompt = (lang=="kz" and "üìò –ï—Å–µ–ø—à–æ—Ç –Ω”©–º—ñ—Ä—ñ–Ω –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:" 
                    or "üìò –í–≤–µ–¥–∏—Ç–µ –ª–∏—Ü–µ–≤–æ–π —Å—á—ë—Ç:")
    await update.message.reply_text(prompt + "\n" + "\n".join(nums))
    return INPUT_READ_LS


@login_required
async def read_ls(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    lang = ctx.user_data.get("lang", "ru")
    ls = update.message.text.strip()
    ok = await sync_to_async(
        MeterUser.objects.using("meter").filter(number=ls).exists
    )()
    if not ok:
        await update.message.reply_text(
            lang=="kz" and "‚ùå –ï—Å–µ–ø—à–æ—Ç —Ç–∞–±—ã–ª–º–∞–¥—ã." or "‚ùå –õ–° –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=main_menu_markup(lang)
        )
        return MAIN_MENU

    ctx.user_data["ls"] = ls
    await update.message.reply_text(
        lang=="kz" and "‚ùÑÔ∏è –°—É—ã“õ –∫”©—Ä—Å–µ—Ç–∫—ñ—à –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:" or "‚ùÑÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏–µ —Ö–æ–ª–æ–¥–Ω–æ–π –≤–æ–¥—ã:"
    )
    return INPUT_COLD


@login_required
async def read_cold(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    lang = ctx.user_data.get("lang", "ru")
    try:
        cold = float(update.message.text.replace(",", "."))
    except ValueError:
        await update.message.reply_text(
            lang=="kz" and "‚ùå “ö–∞—Ç–µ —Å–∞–Ω." or "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.",
            reply_markup=main_menu_markup(lang)
        )
        return MAIN_MENU

    ctx.user_data["cold"] = cold
    await update.message.reply_text(
        lang=="kz" and "üî• –´—Å—Ç—ã“õ –∫”©—Ä—Å–µ—Ç–∫—ñ—à –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:" or "üî• –¢–µ–ø–µ—Ä—å ‚Äî –ø–æ–∫–∞–∑–∞–Ω–∏–µ –≥–æ—Ä—è—á–µ–π –≤–æ–¥—ã:"
    )
    return INPUT_HOT


@login_required
async def read_hot(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    lang = ctx.user_data.get("lang", "ru")
    try:
        hot = float(update.message.text.replace(",", "."))
    except ValueError:
        await update.message.reply_text(
            lang=="kz" and "‚ùå “ö–∞—Ç–µ —Å–∞–Ω." or "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.",
            reply_markup=main_menu_markup(lang)
        )
        return MAIN_MENU

    ls   = ctx.user_data["ls"]
    cold = ctx.user_data["cold"]
    uid  = ctx.user_data["controller_id"]
    mu   = await sync_to_async(MeterUser.objects.using("meter").get)(number=ls)

    # –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å cold+hot
    await sync_to_async(Reading.objects.using("meter").create)(
        user_id      = mu.id,
        entity       = ls,
        punumber     = ls,
        readings     = cold,
        reading2     = hot,
        createdate   = timezone.now(),
        code         = "",
        disabled     = False,
        meterid      = 0,
        disconnected = False,
        corrected    = False,
        isactual     = True,
        sourcecode   = "both",
        yearmonth    = timezone.now().strftime("%Y%m"),
        restricted   = False,
        consumption  = int(cold + hot),
        operatorid   = uid,
        erc_meter_id = 0,
    )

    text = lang=="kz" and f"‚úÖ –ö”©—Ä—Å–µ—Ç–∫—ñ—à—Ç–µ—Ä —Å–∞“õ—Ç–∞–ª–¥—ã:\n‚ùÑÔ∏è {cold}\nüî• {hot}" \
                        or f"‚úÖ –ü–æ–∫–∞–∑–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n‚ùÑÔ∏è {cold}\nüî• {hot}"
    await update.message.reply_text(text, reply_markup=main_menu_markup(lang))
    return MAIN_MENU


# ‚Äî‚Äî‚Äî –û–ø–ª–æ–º–±–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äî‚Äî‚Äî

@login_required
async def menu_seals(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    lang = ctx.user_data.get("lang", "ru")
    area = ctx.user_data["area_id"]
    uas = await sync_to_async(list)(
        UserArea.objects.using("meter")
            .filter(area_id=area)
            .select_related("user")
    )
    if not uas:
        await update.message.reply_text(
            lang=="kz" and "–ê–π–º–∞“õ—Ç–∞ –∞–±–æ–Ω–µ–Ω—Ç—Ç–µ—Ä –∂–æ“õ." or "–í –≤–∞—à–µ–º —Ä–∞–π–æ–Ω–µ –Ω–µ—Ç –∞–±–æ–Ω–µ–Ω—Ç–æ–≤.",
            reply_markup=main_menu_markup(lang)
        )
        return MAIN_MENU

    nums = [ua.user.number for ua in uas]
    prompt = lang=="kz" and "üìù –ï—Å–µ–ø—à–æ—Ç –Ω”©–º—ñ—Ä—ñ–Ω –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:" or "üìù –í–≤–µ–¥–∏—Ç–µ –õ–° –¥–ª—è –æ–ø–ª–æ–º–±–∏—Ä–æ–≤–∞–Ω–∏—è:"
    await update.message.reply_text(prompt + "\n" + "\n".join(nums))
    return INPUT_SEAL_LS


@login_required
async def seal_ls(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    lang = ctx.user_data.get("lang", "ru")
    ls = update.message.text.strip()
    ok = await sync_to_async(MeterUser.objects.using("meter").filter(number=ls).exists)()
    if not ok:
        await update.message.reply_text(
            lang=="kz" and "‚ùå –ï—Å–µ–ø—à–æ—Ç —Ç–∞–±—ã–ª–º–∞–¥—ã." or "‚ùå –õ–° –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=main_menu_markup(lang)
        )
        return MAIN_MENU

    ctx.user_data["ls"] = ls
    await update.message.reply_text(
        lang=="kz" and "–ü–ª–æ–º–±–∞ —Å–µ–±–µ–±—ñ–Ω –∂–∞–∑—ã“£—ã–∑:" or "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ–ø–ª–æ–º–±–∏—Ä–æ–≤–∞–Ω–∏—è:"
    )
    return INPUT_SEAL_REASON


@login_required
async def seal_reason(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    lang = ctx.user_data.get("lang", "ru")
    ctx.user_data["reason"] = update.message.text.strip()
    kb = ReplyKeyboardMarkup([["–•–æ–ª–æ–¥–Ω–∞—è", "–ì–æ—Ä—è—á–∞—è"]], resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text(
        lang=="kz" and "–°—É–¥—ã —Ç–∞“£–¥–∞“£—ã–∑:\n1Ô∏è‚É£ –°—É—ã“õ\n2Ô∏è‚É£ –´—Å—Ç—ã“õ" or "–î–ª—è –∫–∞–∫–æ–≥–æ —Ç–∏–ø–∞ –≤–æ–¥—ã –æ–ø–ª–æ–º–±–∏—Ä–æ–≤–∞–Ω–∏–µ?",
        reply_markup=kb
    )
    return INPUT_SEAL_TYPE


@login_required
async def seal_type(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    lang = ctx.user_data.get("lang", "ru")
    kind = update.message.text.strip()
    ctx.user_data["seal_kind"] = kind.lower()
    today = date.today()
    buttons = [
        InlineKeyboardButton(
            (today + timedelta(days=i)).strftime("%d.%m"),
            callback_data=f"seal_date:{(today + timedelta(days=i)).isoformat()}"
        ) for i in range(14)
    ]
    kb = [buttons[i:i+4] for i in range(0, len(buttons), 4)]
    await update.message.reply_text(
        lang=="kz" and "üóì –ö“Ø–Ω–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:" or "üóì –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
        reply_markup=InlineKeyboardMarkup(kb)
    )
    return INPUT_SEAL_DATE


@login_required
async def process_seal_date(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    lang = ctx.user_data.get("lang", "ru")
    q = update.callback_query
    await q.answer()
    sel = date.fromisoformat(q.data.split(":", 1)[1])
    ctx.user_data["date"] = sel
    slots = InlineKeyboardMarkup([[ 
        InlineKeyboardButton("üïò –î–æ –æ–±–µ–¥–∞", callback_data="slot:morning"),
        InlineKeyboardButton("üïí –ü–æ—Å–ª–µ –æ–±–µ–¥–∞", callback_data="slot:afternoon"),
    ]])
    await q.message.edit_text(
        lang=="kz" and "‚è∞ –£–∞“õ—ã—Ç—Ç—ã —Ç–∞“£–¥–∞“£—ã–∑:" or "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ—Ç:",
        reply_markup=slots
    )
    return INPUT_SEAL_SLOT


@login_required
async def process_seal_slot(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    lang = ctx.user_data.get("lang", "ru")
    q = update.callback_query
    await q.answer()
    code = q.data.split(":", 1)[1]
    slot_label = lang=="kz" and ("–¢–∞“£–µ—Ä—Ç–µ“£","–ö“Ø–Ω—ñ –±–æ–π—ã")[0 if code=="morning" else 1] \
                or ("–î–æ –æ–±–µ–¥–∞","–ü–æ—Å–ª–µ –æ–±–µ–¥–∞")[0 if code=="morning" else 1]

    ls     = ctx.user_data["ls"]
    reason = ctx.user_data["reason"]
    kind   = ctx.user_data["seal_kind"]
    sel    = ctx.user_data["date"]
    uid    = ctx.user_data["controller_id"]

    exists = await sync_to_async(
        Seal.objects.using("meter")
            .filter(scheduledate=sel, type=code, status="new")
            .exists
    )()
    if exists:
        await q.answer(lang=="kz" and "‚ùå –ë“±–ª —É–∞“õ—ã—Ç –±–æ—Å –µ–º–µ—Å." or "‚ùå –°–ª–æ—Ç –∑–∞–Ω—è—Ç.", show_alert=True)
        return await process_seal_date(update, ctx)

    mu = await sync_to_async(MeterUser.objects.using("meter").get)(number=ls)
    await sync_to_async(Seal.objects.using("meter").create)(
        user            = mu,
        txt             = reason,
        createdate      = timezone.now(),
        type            = code,
        entity          = ls,
        phone           = "",
        status          = "new",
        ishot           = (kind=="–≥–æ—Ä—è—á–∞—è"),
        iscold          = (kind=="—Ö–æ–ª–æ–¥–Ω–∞—è"),
        iselect         = False,
        operatorid      = uid,
        verificationcode= "",
        verificationphone="",
        aktnumber       = "",
        scheduledate    = sel
    )

    msg = (
        f"üì§ {lang=='kz' and '”®—Ç—ñ–Ω—ñ—à “õ–∞–±—ã–ª–¥–∞–Ω–¥—ã!' or '–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!'}\n"
        f"{lang=='kz' and '–ï—Å–µ–ø—à–æ—Ç' or '–õ–°'}: {ls}\n"
        f"{lang=='kz' and '–°–µ–±–µ–ø' or '–ü—Ä–∏—á–∏–Ω–∞'}: {reason}\n"
        f"{lang=='kz' and '–°—É —Ç“Ø—Ä—ñ' or '–¢–∏–ø'}: {kind}\n"
        f"{lang=='kz' and '–ö“Ø–Ω' or '–î–∞—Ç–∞'}: {sel.strftime('%d.%m.%Y')}\n"
        f"{lang=='kz' and '–£–∞“õ—ã—Ç' or '–°–ª–æ—Ç'}: {slot_label}"
    )
    await q.message.edit_text(msg)
    await q.message.reply_text(lang=="kz" and "–ö–µ–ª–µ—Å—ñ?" or "–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=main_menu_markup(lang))
    return MAIN_MENU


async def cancel(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    ctx.user_data.clear()
    await update.message.reply_text(
        "üö™ " + (ctx.user_data.get("lang")=="kz" and "–®—ã“ì—É. “ö–∞–π—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è “Ø—à—ñ–Ω –±–∞—Å—ã“£—ã–∑:" 
                                        or "–í—ã—Ö–æ–¥. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ ‚Äî –Ω–∞–∂–º–∏—Ç–µ:"),
        reply_markup=login_markup()
    )
    return ConversationHandler.END
