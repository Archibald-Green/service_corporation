# bots_app/views.py

import os
import django
from datetime import date, timedelta
from django.views.decorators.csrf import csrf_exempt
from django.http import HttpResponse
from twilio.twiml.messaging_response import MessagingResponse
from django.utils import timezone

# ‚Äî‚Äî‚Äî Django setup ‚Äî‚Äî‚Äî
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "service.settings")
django.setup()

from meter_app.models import WhatsAppSession, MeterUser, Meter, Seal
from bots_app.management.commands.bot_utils import (
    save_seal_request,
    save_or_update_reading,
    get_last_record
)

TECH_PHONE = "+7 701 123 45 67"

# –≤—Å–µ —Ç–µ–∫—Å—Ç—ã –Ω–∞ –¥–≤—É—Ö —è–∑—ã–∫–∞—Ö
TEXTS = {
    'ru': {
        'lang_prompt':     "üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:\n1Ô∏è‚É£ –†—É—Å—Å–∫–∏–π\n2Ô∏è‚É£ “ö–∞–∑–∞“õ—à–∞",
        'welcome':         "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
        'menu':            "1Ô∏è‚É£ –û–ø–ª–æ–º–±–∏—Ä–æ–≤–∞–Ω–∏–µ\n2Ô∏è‚É£ –ü–æ–∫–∞–∑–∞–Ω–∏—è –≤–æ–¥—ã\n3Ô∏è‚É£ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞\n4Ô∏è‚É£ –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫",
        'support':         f"‚òéÔ∏è –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞: {TECH_PHONE}",
        'enter_ls_seal':   "üìù –í–≤–µ–¥–∏—Ç–µ –ª–∏—Ü–µ–≤–æ–π —Å—á—ë—Ç –¥–ª—è –æ–ø–ª–æ–º–±–∏—Ä–æ–≤–∞–Ω–∏—è:",
        'enter_ls_read':   "üìò –í–≤–µ–¥–∏—Ç–µ –ª–∏—Ü–µ–≤–æ–π —Å—á—ë—Ç –¥–ª—è –ø–æ–∫–∞–∑–∞–Ω–∏–π:",
        'invalid_choice':  "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ *1*, *2*, *3* –∏–ª–∏ *4*.",
        'ls_not_found':    "‚ùå –õ–° –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é.",
        'enter_reason':    "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ–ø–ª–æ–º–±–∏—Ä–æ–≤–∞–Ω–∏—è:",
        'choose_water':    "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–æ–¥—ã:\n1Ô∏è‚É£ –•–æ–ª–æ–¥–Ω–∞—è\n2Ô∏è‚É£ –ì–æ—Ä—è—á–∞—è",
        'invalid_water':   "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä, –≤–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é.",
        'choose_date':     "üóì –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É (–æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–æ–º–µ—Ä–æ–º):",
        'invalid_date':    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä, –≤–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é.",
        'date_busy':       "‚ùå –ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å —É–∂–µ –µ—Å—Ç—å –∑–∞—è–≤–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é.",
        'choose_slot':     "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ—Ç:\n1Ô∏è‚É£ –î–æ –æ–±–µ–¥–∞\n2Ô∏è‚É£ –ü–æ—Å–ª–µ –æ–±–µ–¥–∞",
        'invalid_slot':    "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä, –≤–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é.",
        'seal_success':    "‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n–õ–°: {ls}\n–ü—Ä–∏—á–∏–Ω–∞: {reason}\n–¢–∏–ø –≤–æ–¥—ã: {kind}\n–î–∞—Ç–∞: {date}\n–°–ª–æ—Ç: {slot}",
        'enter_cold':      "‚ùÑÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏–µ –•–û–õ–û–î–ù–û–ô –≤–æ–¥—ã:",
        'invalid_number':  "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ, –≤–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é.",
        'enter_hot':       "üî• –¢–µ–ø–µ—Ä—å ‚Äî –ø–æ–∫–∞–∑–∞–Ω–∏–µ –ì–û–†–Ø–ß–ï–ô –≤–æ–¥—ã:",
        'reading_success': "‚úÖ –ü–æ–∫–∞–∑–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n‚ùÑÔ∏è {cold}\nüî• {hot}",
        'cannot_edit':     "‚ùå –ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è –ø–æ—Å–ª–µ 24 —á –∏–ª–∏ –µ—Å–ª–∏ –º–µ–Ω—å—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ, –≤–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é.",
        'error':           "‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é.",
    },
    'kz': {
        'lang_prompt':     "üåê –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:\n1Ô∏è‚É£ –†—É—Å—Å–∫–∏–π\n2Ô∏è‚É£ “ö–∞–∑–∞“õ—à–∞",
        'welcome':         "üëã “ö–æ—à –∫–µ–ª–¥—ñ“£—ñ–∑!",
        'menu':            "1Ô∏è‚É£ –ü–ª–æ–º–±–∞ “õ–æ—é\n2Ô∏è‚É£ –°—É –∫”©—Ä—Å–µ—Ç–∫—ñ—à—Ç–µ—Ä—ñ\n3Ô∏è‚É£ –¢–µ—Ö “õ–æ–ª–¥–∞—É\n4Ô∏è‚É£ –¢—ñ–ª–¥—ñ –∞—É—ã—Å—Ç—ã—Ä—É",
        'support':         f"‚òéÔ∏è –¢–µ—Ö “õ–æ–ª–¥–∞—É: {TECH_PHONE}",
        'enter_ls_seal':   "üìù –ï—Å–µ–ø—à–æ—Ç –Ω”©–º—ñ—Ä—ñ–Ω –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:",
        'enter_ls_read':   "üìò –ö”©—Ä—Å–µ—Ç–∫—ñ—à “Ø—à—ñ–Ω –µ—Å–µ–ø—à–æ—Ç –Ω”©–º—ñ—Ä—ñ–Ω –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:",
        'invalid_choice':  "‚ùå ”®—Ç—ñ–Ω–µ–º—ñ–∑, *1*, *2*, *3* –Ω–µ–º–µ—Å–µ *4* –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑.",
        'ls_not_found':    "‚ùå –ï—Å–µ–ø—à–æ—Ç —Ç–∞–±—ã–ª–º–∞–¥—ã, –±–∞—Å—Ç—ã –º”ô–∑—ñ—Ä–≥–µ –æ—Ä–∞–ª–∞–º—ã–∑.",
        'enter_reason':    "–ü–ª–æ–º–±–∞ —Å–µ–±–µ–±—ñ–Ω –∂–∞–∑—ã“£—ã–∑:",
        'choose_water':    "–°—É–¥—ã —Ç–∞“£–¥–∞“£—ã–∑:\n1Ô∏è‚É£ –°—É—ã“õ\n2Ô∏è‚É£ –´—Å—Ç—ã“õ",
        'invalid_water':   "‚ùå “ö–∞—Ç–µ —Ç–∞“£–¥–∞—É, –±–∞—Å—Ç—ã –º”ô–∑—ñ—Ä–≥–µ –æ—Ä–∞–ª–∞–º—ã–∑.",
        'choose_date':     "üóì –ö“Ø–Ω–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑ (–Ω”©–º—ñ—Ä—ñ):",
        'invalid_date':    "‚ùå “ö–∞—Ç–µ –Ω”©–º—ñ—Ä, –±–∞—Å—Ç—ã –º”ô–∑—ñ—Ä–≥–µ –æ—Ä–∞–ª–∞–º—ã–∑.",
        'date_busy':       "‚ùå –û—Å—ã –∫“Ø–Ω–≥–µ ”©—Ç—ñ–Ω—ñ—à –±–∞—Ä, –±–∞—Å—Ç—ã –º”ô–∑—ñ—Ä–≥–µ –æ—Ä–∞–ª–∞–º—ã–∑.",
        'choose_slot':     "‚è∞ –£–∞“õ—ã—Ç—Ç—ã —Ç–∞“£–¥–∞“£—ã–∑:\n1Ô∏è‚É£ –¢–∞“£–µ—Ä—Ç–µ“£\n2Ô∏è‚É£ –ö“Ø–Ω—ñ –±–æ–π—ã",
        'invalid_slot':    "‚ùå “ö–∞—Ç–µ —Ç–∞“£–¥–∞—É, –±–∞—Å—Ç—ã –º”ô–∑—ñ—Ä–≥–µ –æ—Ä–∞–ª–∞–º—ã–∑.",
        'seal_success':    "‚úÖ ”®—Ç—ñ–Ω—ñ—à “õ–∞–±—ã–ª–¥–∞–Ω–¥—ã!\n–ï—Å–µ–ø—à–æ—Ç: {ls}\n–°–µ–±–µ–ø: {reason}\n–°—É —Ç“Ø—Ä—ñ: {kind}\n–ö“Ø–Ω: {date}\n–£–∞“õ—ã—Ç: {slot}",
        'enter_cold':      "‚ùÑÔ∏è –°—É—ã“õ –∫”©—Ä—Å–µ—Ç–∫—ñ—à –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:",
        'invalid_number':  "‚ùå “ö–∞—Ç–µ —Å–∞–Ω, –±–∞—Å—Ç—ã –º”ô–∑—ñ—Ä–≥–µ –æ—Ä–∞–ª–∞–º—ã–∑.",
        'enter_hot':       "üî• –´—Å—Ç—ã“õ –∫”©—Ä—Å–µ—Ç–∫—ñ—à –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:",
        'reading_success': "‚úÖ –ö”©—Ä—Å–µ—Ç–∫—ñ—à—Ç–µ—Ä —Å–∞“õ—Ç–∞–ª–¥—ã:\n‚ùÑÔ∏è {cold}\nüî• {hot}",
        'cannot_edit':     "‚ùå 24 —Å–∞“ì–∞—Ç—Ç–∞–Ω –∫–µ–π—ñ–Ω –Ω–µ–º–µ—Å–µ –∞–∑ –∫”©—Ä—Å–µ—Ç–∫—ñ—à—Ç—ñ —Ç“Ø–∑–µ—Ç—É–≥–µ –±–æ–ª–º–∞–π–¥—ã, –±–∞—Å—Ç—ã –º”ô–∑—ñ—Ä–≥–µ –æ—Ä–∞–ª–∞–º—ã–∑.",
        'error':           "‚ùå “ö–∞—Ç–µ, –±–∞—Å—Ç—ã –º”ô–∑—ñ—Ä–≥–µ –æ—Ä–∞–ª–∞–º—ã–∑.",
    }
}

def get_session(phone_raw):
    phone = phone_raw.replace("whatsapp:", "")
    sess, _ = WhatsAppSession.objects.get_or_create(
        phone=phone,
        defaults={'data': {}, 'state': ''}
    )
    if sess.data is None:
        sess.data = {}
    return sess

@csrf_exempt
def whatsapp_webhook(request):
    incoming = request.POST
    from_     = incoming.get("From", "")
    body      = incoming.get("Body", "").strip()
    resp      = MessagingResponse()
    msg       = resp.message()

    sess  = get_session(from_)
    state = sess.state or ""
    data  = sess.data
    lang  = data.get('lang', 'ru')

    # ‚Äî –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ ‚Äî
    if state in ("", "END"):
        msg.body(TEXTS['ru']['lang_prompt'])
        sess.state = "CHOOSE_LANG"

    elif state == "CHOOSE_LANG":
        if body == "1":
            data['lang'] = 'ru'
        elif body == "2":
            data['lang'] = 'kz'
        else:
            msg.body("‚ùå 1 –∏–ª–∏ 2 –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑ / –≤–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2")
            sess.save()
            return HttpResponse(str(resp), content_type="text/xml")

        lang = data['lang']
        msg.body(f"{TEXTS[lang]['welcome']}\n{TEXTS[lang]['menu']}")
        sess.state = "CHOOSE_ACTION"

    # ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Äî
    elif state == "CHOOSE_ACTION":
        lang = data.get('lang', 'ru')
        if body == "1":
            msg.body(TEXTS[lang]['enter_ls_seal'])
            sess.state = "SEAL_ACCOUNT"
        elif body == "2":
            msg.body(TEXTS[lang]['enter_ls_read'])
            sess.state = "READING_ACCOUNT"
        elif body == "3":
            msg.body(TEXTS[lang]['support'])
            sess.state = "END"
            sess.data  = {}
        elif body == "4":
            msg.body(TEXTS['ru']['lang_prompt'])
            sess.state = "CHOOSE_LANG"
        else:
            msg.body(f"{TEXTS[lang]['invalid_choice']}\n{TEXTS[lang]['menu']}")

    # ‚Äî –æ–ø–ª–æ–º–±–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äî
    elif state == "SEAL_ACCOUNT":
        lang = data.get('lang', 'ru')
        if not Meter.objects.using('meter').filter(punumber=body).exists():
            msg.body(TEXTS[lang]['ls_not_found'] + "\n" + TEXTS[lang]['menu'])
            sess.state = "CHOOSE_ACTION"
        else:
            data['ls'] = body
            msg.body(TEXTS[lang]['enter_reason'])
            sess.state = "SEAL_REASON"

    elif state == "SEAL_REASON":
        lang = data.get('lang', 'ru')
        data['reason'] = body
        msg.body(TEXTS[lang]['choose_water'])
        sess.state = "SEAL_TYPE"

    elif state == "SEAL_TYPE":
        lang = data.get('lang', 'ru')
        if body == "1":
            data['kind'] = TEXTS[lang]['choose_water'].split('\n')[0].split(' ')[1]
        elif body == "2":
            data['kind'] = TEXTS[lang]['choose_water'].split('\n')[1].split(' ')[1]
        else:
            msg.body(TEXTS[lang]['invalid_water'] + "\n" + TEXTS[lang]['menu'])
            sess.state = "CHOOSE_ACTION"
            sess.data  = {}
            sess.save()
            return HttpResponse(str(resp), content_type="text/xml")

        today = date.today()
        lines = [f"{i+1}. {(today+timedelta(days=i)).strftime('%d.%m')}" for i in range(14)]
        msg.body(TEXTS[lang]['choose_date'] + "\n" + "\n".join(lines))
        sess.state = "SEAL_DATE"

    elif state == "SEAL_DATE":
        lang = data.get('lang', 'ru')
        try:
            idx = int(body) - 1
            if idx < 0 or idx >= 14:
                raise ValueError
        except ValueError:
            msg.body(TEXTS[lang]['invalid_date'] + "\n" + TEXTS[lang]['menu'])
            sess.state = "CHOOSE_ACTION"
        else:
            sel = date.today() + timedelta(days=idx)
            mu  = MeterUser.objects.using('meter').get(number=data['ls'])
            if Seal.objects.using('meter').filter(user_id=mu.id, scheduledate=sel).exists():
                msg.body(TEXTS[lang]['date_busy'] + "\n" + TEXTS[lang]['menu'])
                sess.state = "CHOOSE_ACTION"
            else:
                data['date'] = sel.isoformat()
                msg.body(TEXTS[lang]['choose_slot'])
                sess.state = "SEAL_SLOT"

    elif state == "SEAL_SLOT":
        lang = data.get('lang', 'ru')
        if body not in ("1","2"):
            msg.body(TEXTS[lang]['invalid_slot'] + "\n" + TEXTS[lang]['menu'])
            sess.state = "CHOOSE_ACTION"
        else:
            slot_code  = "morning" if body == "1" else "afternoon"
            slot_label = {
                'ru':("–î–æ –æ–±–µ–¥–∞","–ü–æ—Å–ª–µ –æ–±–µ–¥–∞"),
                'kz':("–¢–∞“£–µ—Ä—Ç–µ“£","–ö“Ø–Ω—ñ –±–æ–π—ã")
            }[lang][0 if body == "1" else 1]

            sel = date.fromisoformat(data['date'])
            save_seal_request(
                telegram_id=from_,
                account    = data['ls'],
                reason     = data['reason'],
                date       = sel,
                timeslot   = slot_code,
                water_type = data['kind'].lower()
            )
            msg.body(TEXTS[lang]['seal_success'].format(
                ls=data['ls'],
                reason=data['reason'],
                kind=data['kind'],
                date=sel.strftime('%d.%m.%Y'),
                slot=slot_label
            ))
            sess.state = "END"
            sess.data  = {}

    # ‚Äî –ø–æ–∫–∞–∑–∞–Ω–∏—è –≤–æ–¥—ã ‚Äî
    elif state == "READING_ACCOUNT":
        lang = data.get('lang', 'ru')
        if not Meter.objects.using('meter').filter(punumber=body).exists():
            msg.body(TEXTS[lang]['ls_not_found'] + "\n" + TEXTS[lang]['menu'])
            sess.state = "CHOOSE_ACTION"
        else:
            data['ls'] = body
            msg.body(TEXTS[lang]['enter_cold'])
            sess.state = "READING_COLD"

    elif state == "READING_COLD":
        lang = data.get('lang', 'ru')
        try:
            cold = float(body.replace(",","."))
        except ValueError:
            msg.body(TEXTS[lang]['invalid_number'] + "\n" + TEXTS[lang]['menu'])
            sess.state = "CHOOSE_ACTION"
        else:
            last = get_last_record(from_, data['ls'])
            prev = last.readings if last else None
            if prev is not None and cold < prev:
                msg.body(f"‚ùå {cold} < –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ({prev})\n" + TEXTS[lang]['menu'])
                sess.state = "CHOOSE_ACTION"
            else:
                data['cold'] = cold
                msg.body(TEXTS[lang]['enter_hot'])
                sess.state = "READING_HOT"

    elif state == "READING_HOT":
        lang = data.get('lang', 'ru')
        try:
            hot = float(body.replace(",","."))
        except ValueError:
            msg.body(TEXTS[lang]['invalid_number'] + "\n" + TEXTS[lang]['menu'])
            sess.state = "CHOOSE_ACTION"
        else:
            last = get_last_record(from_, data['ls'])
            prev = last.reading2 if last else None
            if prev is not None and hot < prev:
                msg.body(f"‚ùå {hot} < –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ({prev})\n" + TEXTS[lang]['menu'])
                sess.state = "CHOOSE_ACTION"
            else:
                data['hot'] = hot
                now = timezone.now()
                try:
                    save_or_update_reading(from_, data['ls'], data['cold'], "cold", now)
                    save_or_update_reading(from_, data['ls'], hot,           "hot",  now)
                except ValueError as e:
                    msg.body(f"‚ùå {e}\n\n{TEXTS[lang]['menu']}")
                    sess.state = "CHOOSE_ACTION"
                else:
                    msg.body(TEXTS[lang]['reading_success'].format(
                        cold=data['cold'], hot=hot
                    ))
                    sess.state = "END"
                    sess.data  = {}

    else:
        # –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ–µ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é
        lang = data.get('lang','ru')
        msg.body(TEXTS[lang]['error'] + "\n" + TEXTS[lang]['menu'])
        sess.state = "CHOOSE_ACTION"
        sess.data  = {}

    sess.data = data
    sess.save()
    return HttpResponse(str(resp), content_type="text/xml")
