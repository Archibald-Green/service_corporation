import os
import aiohttp
from django.core.management.base import BaseCommand
from telegram.ext import (
    ApplicationBuilder, MessageHandler, filters,
    ContextTypes, ConversationHandler
)
from telegram import Update, ReplyKeyboardMarkup
from asgiref.sync import sync_to_async
from django.contrib.auth.hashers import check_password, make_password

from portal_app.models import User, AuthUser, Linked
from portal_app.creds.cred import botTOKEN
from urllib.parse import quote_plus

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ google_service.py
from .google_service import (
    get_drive_files_with_links,
    get_salary_by_iin,
    make_short_name_no_dots_for_user,
    get_vacation_by_user_and_job,
    get_payroll_by_user_from_google_sheet,
    format_payroll,
    save_payroll_to_pdf,
    get_drive_files_by_folder
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
WAITING_USERNAME = 1
WAITING_PASSWORD = 2
WAITING_JOB = 50
WAITING_LANGUAGE = 100
WAITING_PAYROLL_MONTH = 110
WAITING_PDF_CONFIRM = 120

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
ADMIN_MENU = 200
ADMIN_CHANGE_PASS_USERNAME = 210
ADMIN_CHANGE_PASS_NEW = 220
ADMIN_BROADCAST_MESSAGE = 230

AUTHORIZED_USERS = set()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
AUTHORIZED_KEYBOARD = ReplyKeyboardMarkup(
    [
        ["–ü–æ–º–æ—â—å", "–û—Ç–ø—É—Å–∫", "–†–∞—Å—á–µ—Ç–Ω—ã–π –ª–∏—Å—Ç", "–Ø–∑—ã–∫"],
        ["–ó–∞—Ä–ø–ª–∞—Ç–∞", "–î–æ–∫—É–º–µ–Ω—Ç—ã", "–ö–æ–Ω—Ç–∞–∫—Ç—ã", "–ê–¥–º–∏–Ω–∫–∞"]
    ],
    resize_keyboard=True
)
UNAUTHORIZED_KEYBOARD = ReplyKeyboardMarkup(
    [["–ü–æ–º–æ—â—å", "–Ø–∑—ã–∫", "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"]],
    resize_keyboard=True
)
PDF_KEYBOARD = ReplyKeyboardMarkup([["–°–æ—Ö—Ä–∞–Ω–∏—Ç—å PDF", "–ù–∞–∑–∞–¥"]], resize_keyboard=True)

@sync_to_async
def get_user_department_folder(tg_id: int) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç folder_id –∏–∑ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –æ—Ç–¥–µ–ª–∞ (–∏–∑ –º–æ–¥–µ–ª–∏ UserDepartmentMapping)
    –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∑–∞–¥–∞–Ω–Ω—ã–º telegram_id.
    """
    user = User.objects.filter(telegram_id=tg_id).first()
    if user and hasattr(user, 'department_mapping') and user.department_mapping.department:
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –≤ –º–æ–¥–µ–ª–∏ Department –µ—Å—Ç—å –ø–æ–ª–µ folder_id, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É
        return user.department_mapping.department.folder_id
    return None
# –û–±—ë—Ä—Ç–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π
@sync_to_async
def find_user_by_name(name: str) -> User | None:
    return User.objects.filter(name=name).first()

@sync_to_async
def find_auth_user_by_user(user: User) -> AuthUser | None:
    return AuthUser.objects.filter(user=user).first()

@sync_to_async
def save_user(user: User):
    user.save()

@sync_to_async
def log_to_linked(tg_id, iin, t_number):
    Linked.objects.create(
        telegram_id=tg_id,
        iin=iin or "",
        t_number=t_number or ""
    )

@sync_to_async
def find_user_by_telegram_id(tg_id: int) -> User | None:
    return User.objects.filter(telegram_id=tg_id).first()

@sync_to_async
def get_salary_async(iin: str):
    return get_salary_by_iin(iin)

@sync_to_async
def get_vacation_async(user_obj, job: str):
    return get_vacation_by_user_and_job(user_obj, job)

# –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞—Å—á–µ—Ç–Ω–æ–≥–æ –ª–∏—Å—Ç–∞ –∏–∑ Google Sheets
async_get_payroll_by_user = sync_to_async(get_payroll_by_user_from_google_sheet)

CONTACTS_TEXT = (
    "\nüìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –æ—Ç–¥–µ–ª–∞:\n\n"
    "‚Ä¢ –û–ø–µ—Ä–∞—Ç–æ—Ä: 101\n"
    "‚Ä¢ –ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è: 102\n"
    "‚Ä¢ –û—Ç–¥–µ–ª –∫–∞–¥—Ä–æ–≤: 103\n"
    "‚Ä¢ –û—Ö—Ä–∞–Ω–∞: 104\n"
    "‚Ä¢ –î–∏—Ä–µ–∫—Ç–æ—Ä: 105"
)

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ Google Apps Script,
# –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è URL PDF-—Ñ–∞–π–ª–∞ (—Ä–∞—Å—á–µ—Ç–Ω–æ–≥–æ –ª–∏—Å—Ç–∞)
async def request_payroll_pdf(iin: str, month: str) -> str:
    iin_encoded = quote_plus(iin)
    month_encoded = quote_plus(month)
    url = f"https://script.google.com/macros/s/AKfycbwC9Fh_4tl5XrPP4dfAvI5jCboEADwAhUuRedkP4deQW4QSdkP6QdXFDzjfusMJxvbQKw/exec?iin={iin_encoded}&month={month_encoded}"
    print(f"[DEBUG] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫: {url}")
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status != 200:
                print(f"[ERROR] Google Script –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status}")
                return None
            text = await response.text()
            print(f"[DEBUG] –û—Ç–≤–µ—Ç –æ—Ç —Å–∫—Ä–∏–ø—Ç–∞: {text[:300]}...")
            return text.strip()

def format_payroll_text(payroll: dict) -> str:
    return (
        f"–§–ò–û: {payroll.get('–§–ò–û')}\n"
        f"–ò–ò–ù: {payroll.get('–ò–ò–ù')}\n"
        f"–¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä: {payroll.get('–¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä')}\n"
        f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {payroll.get('–î–æ–ª–∂–Ω–æ—Å—Ç—å')}\n"
        f"–ú–µ—Å—è—Ü: {payroll.get('–ú–µ—Å—è—Ü')}\n"
        f"–û–∫–ª–∞–¥: {payroll.get('–û–∫–ª–∞–¥')}\n"
        f"–ü—Ä–µ–º–∏—è: {payroll.get('–ü—Ä–µ–º–∏—è')}\n"
        f"–ò–ü–ù: {payroll.get('–ò–ü–ù')}\n"
        f"–û–ü–í: {payroll.get('–û–ü–í')}\n"
        f"–û–°–ú–°: {payroll.get('–û–°–ú–°')}\n"
        f"–£–¥–µ—Ä–∂–∞–Ω–∏—è: {payroll.get('–£–¥–µ—Ä–∂–∞–Ω–∏—è')}\n"
        f"–ò—Ç–æ–≥–æ –∫ –≤—ã–ø–ª–∞—Ç–µ: {payroll.get('–ò—Ç–æ–≥–æ –∫ –≤—ã–ø–ª–∞—Ç–µ')}"
    )

###############################################################################
# –ê–¥–º–∏–Ω–ø–∞–Ω–µ–ª—å: –º–µ–Ω—é –∏ —Ñ—É–Ω–∫—Ü–∏–∏
###############################################################################
# –ò–º–ø–æ—Ä—Ç —Ñ–æ—Ä–º—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
from portal_app.forms import AuthUserForm

@sync_to_async
def update_auth_user_with_form(auth_user, data: dict) -> tuple[bool, dict]:
    form = AuthUserForm(data=data, instance=auth_user)
    if form.is_valid():
        form.save()
        return True, {}
    else:
        return False, form.errors

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@sync_to_async
def get_all_users() -> str:
    users = User.objects.all()
    if not users:
        return "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
    result = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
    for user in users:
        result += f"{user.id}. {user.name} {user.first_name} (Telegram: {user.telegram_id}, –ê–¥–º–∏–Ω: {user.isadmin})\n"
    return result

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ (–∑–¥–µ—Å—å –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ —Å—Ç–∞—Ç–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç)
def get_latest_logs() -> str:
    return ("–õ–æ–≥–∏:\n"
            "- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: 10 –∑–∞–ø–∏—Å–µ–π\n"
            "- –û—à–∏–±–∫–∏: 2 –∑–∞–ø–∏—Å–∏\n"
            "- –î–µ–π—Å—Ç–≤–∏—è: 5 –∑–∞–ø–∏—Å–µ–π\n")

# –ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å: —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
async def start_admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = update.effective_user.id
    user_obj = await find_user_by_telegram_id(tg_id)
    lang = context.user_data.get("lang", "ru")
    if not user_obj or not user_obj.isadmin:
        msg = "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞." if lang == "ru" else "–°—ñ–∑–¥–µ ”ô–∫—ñ–º—à—ñ–ª—ñ–∫ “õ“±“õ—ã“õ—Ç–∞—Ä –∂–æ“õ."
        await update.message.reply_text(msg, reply_markup=AUTHORIZED_KEYBOARD)
        return ConversationHandler.END
    admin_keyboard = ReplyKeyboardMarkup(
        [
            ["–°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å", "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"],
            ["–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏", "–†–∞—Å—Å—ã–ª–∫–∞"],
            ["–í—ã—Ö–æ–¥"]
        ],
        resize_keyboard=True
    )
    msg = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:" if lang == "ru" else "–Ü—Å-”ô—Ä–µ–∫–µ—Ç—Ç—ñ —Ç–∞“£–¥–∞“£—ã–∑:"
    await update.message.reply_text(msg, reply_markup=admin_keyboard)
    return ADMIN_MENU

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –≤ –∞–¥–º–∏–Ω—Å–∫–æ–º –º–µ–Ω—é
async def admin_menu_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text.strip()
    lang = context.user_data.get("lang", "ru")
    if choice == "–°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å":
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á–µ–π –ø–∞—Ä–æ–ª—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
            reply_markup=AUTHORIZED_KEYBOARD
        )
        return ADMIN_CHANGE_PASS_USERNAME
    elif choice == "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π":
        users_list = await get_all_users()
        await update.message.reply_text(users_list, reply_markup=AUTHORIZED_KEYBOARD)
        # –ü–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é
        return await start_admin_panel(update, context)
    elif choice == "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏":
        # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–Ω—ã–µ –ª–æ–≥–∏
        logs = get_latest_logs()
        await update.message.reply_text(logs, reply_markup=AUTHORIZED_KEYBOARD)
        return await start_admin_panel(update, context)
    elif choice == "–†–∞—Å—Å—ã–ª–∫–∞":
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
            reply_markup=AUTHORIZED_KEYBOARD
        )
        return ADMIN_BROADCAST_MESSAGE
    elif choice == "–í—ã—Ö–æ–¥":
        await update.message.reply_text("–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω–ø–∞–Ω–µ–ª–∏.", reply_markup=AUTHORIZED_KEYBOARD)
        return ConversationHandler.END
    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=AUTHORIZED_KEYBOARD)
        return ADMIN_MENU

# –î–∏–∞–ª–æ–≥ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
async def admin_change_pass_username(update: Update, context: ContextTypes.DEFAULT_TYPE):
    target_username = update.message.text.strip()
    lang = context.user_data.get("lang", "ru")
    target_user = await find_user_by_name(target_username)
    if not target_user:
        msg = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω." if lang == "ru" else "–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã —Ç–∞–±—ã–ª–º–∞–¥—ã."
        await update.message.reply_text(msg, reply_markup=AUTHORIZED_KEYBOARD)
        return ConversationHandler.END
    context.user_data["target_user"] = target_user
    msg = f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_username}:" if lang == "ru" else f"{target_username} “Ø—à—ñ–Ω –∂–∞“£–∞ “õ“±–ø–∏—è —Å”©–∑–¥—ñ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:"
    await update.message.reply_text(msg)
    return ADMIN_CHANGE_PASS_NEW

async def admin_change_pass_new(update: Update, context: ContextTypes.DEFAULT_TYPE):
    new_password = update.message.text.strip()
    lang = context.user_data.get("lang", "ru")
    target_user = context.user_data.get("target_user")
    if not target_user:
        msg = "–û—à–∏–±–∫–∞: —Ü–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω." if lang == "ru" else "“ö–∞—Ç–µ: –º–∞“õ—Å–∞—Ç—Ç—ã –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã —Ç–∞–±—ã–ª–º–∞–¥—ã."
        await update.message.reply_text(msg, reply_markup=AUTHORIZED_KEYBOARD)
        return ConversationHandler.END
    auth_user = await find_auth_user_by_user(target_user)
    if not auth_user:
        msg = "–£ –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–∞—Ä–æ–ª—å." if lang == "ru" else "–û—Å—ã –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã “Ø—à—ñ–Ω “õ“±–ø–∏—è —Å”©–∑ –æ—Ä–Ω–∞—Ç—ã–ª–º–∞“ì–∞–Ω."
        await update.message.reply_text(msg, reply_markup=AUTHORIZED_KEYBOARD)
        return ConversationHandler.END
    data = {'user': target_user.id, 'password_raw': new_password}
    success, errors = await update_auth_user_with_form(auth_user, data)
    if success:
        msg = f"–ü–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user.name or target_user.first_name} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω." if lang == "ru" else f"{target_user.name or target_user.first_name} “Ø—à—ñ–Ω “õ“±–ø–∏—è —Å”©–∑ —Å”ô—Ç—Ç—ñ ”©–∑–≥–µ—Ä—Ç—ñ–ª–¥—ñ."
        await update.message.reply_text(msg, reply_markup=AUTHORIZED_KEYBOARD)
    else:
        msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è: {errors}" if lang == "ru" else f"“ö“±–ø–∏—è —Å”©–∑–¥—ñ ”©–∑–≥–µ—Ä—Ç—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ: {errors}"
        await update.message.reply_text(msg, reply_markup=AUTHORIZED_KEYBOARD)
    return await start_admin_panel(update, context)

# –î–∏–∞–ª–æ–≥ —Ä–∞—Å—Å—ã–ª–∫–∏
async def admin_broadcast_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    broadcast_text = update.message.text.strip()
    lang = context.user_data.get("lang", "ru")
    if not broadcast_text:
        msg = "–°–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑." if lang == "ru" else "–•–∞–±–∞—Ä–ª–∞–º–∞ –±–æ—Å. “ö–∞–π—Ç–∞–¥–∞–Ω –∫”©—Ä—ñ“£—ñ–∑."
        await update.message.reply_text(msg, reply_markup=AUTHORIZED_KEYBOARD)
        return ADMIN_BROADCAST_MESSAGE
    # –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    for user_id in AUTHORIZED_USERS:
        try:
            await context.bot.send_message(chat_id=user_id, text=f"–†–∞—Å—Å—ã–ª–∫–∞:\n{broadcast_text}")
        except Exception as e:
            print(f"[ERROR] –ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    msg = "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º." if lang == "ru" else "–•–∞–±–∞—Ä–ª–∞–º–∞ –±–∞—Ä–ª—ã“õ –∂“Ø–π–µ–≥–µ –∫—ñ—Ä–≥–µ–Ω –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä“ì–∞ –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ."
    await update.message.reply_text(msg, reply_markup=AUTHORIZED_KEYBOARD)
    return await start_admin_panel(update, context)

# –ê–¥–º–∏–Ω—Å–∫–∏–π ConversationHandler
admin_panel_conv_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^–ê–¥–º–∏–Ω–∫–∞$"), start_admin_panel)],
    states={
        ADMIN_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_menu_choice)],
        ADMIN_CHANGE_PASS_USERNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_change_pass_username)],
        ADMIN_CHANGE_PASS_NEW: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_change_pass_new)],
        ADMIN_BROADCAST_MESSAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_broadcast_message)]
    },
    fallbacks=[MessageHandler(filters.Regex("^–í—ã—Ö–æ–¥$"), lambda update, context: ConversationHandler.END)]
)

###############################################################################
# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –±–æ—Ç–∞
###############################################################################
class Command(BaseCommand):
    help = "Bot with payroll lookup, PDF generation and admin panel (Russian/Kazakh)."

    def handle(self, *args, **options):
        BOT_TOKEN = botTOKEN
        app = ApplicationBuilder().token(BOT_TOKEN).build()

        # ---------- Language Selection ----------
        async def start_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
            language_keyboard = ReplyKeyboardMarkup([["–†—É—Å—Å–∫–∏–π", "“ö–∞–∑–∞“õ—à–∞"]], resize_keyboard=True)
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:",
                reply_markup=language_keyboard
            )
            return WAITING_LANGUAGE

        async def language_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
            choice = update.message.text.strip()
            if choice == "–†—É—Å—Å–∫–∏–π":
                context.user_data["lang"] = "ru"
            elif choice == "“ö–∞–∑–∞“õ—à–∞":
                context.user_data["lang"] = "kz"
            else:
                await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return WAITING_LANGUAGE
            await update.message.reply_text(
                "–Ø–∑—ã–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω.",
                reply_markup=(AUTHORIZED_KEYBOARD if update.effective_user.id in AUTHORIZED_USERS else UNAUTHORIZED_KEYBOARD)
            )
            return ConversationHandler.END

        language_conv_handler = ConversationHandler(
            entry_points=[MessageHandler(filters.Regex("^–Ø–∑—ã–∫$"), start_language)],
            states={WAITING_LANGUAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, language_choice)]},
            fallbacks=[]
        )

        # ---------- Authorization ----------
        async def start_auth(update: Update, context: ContextTypes.DEFAULT_TYPE):
            lang = context.user_data.get("lang", "ru")
            text = "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:" if lang == "ru" else "–õ–æ–≥–∏–Ω–¥—ñ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:"
            await update.message.reply_text(text)
            return WAITING_USERNAME

        async def username_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
            context.user_data["pending_username"] = update.message.text.strip()
            lang = context.user_data.get("lang", "ru")
            text = "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:" if lang == "ru" else "“ö“±–ø–∏—è —Å”©–∑–¥—ñ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:"
            await update.message.reply_text(text)
            return WAITING_PASSWORD

        async def password_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
            tg_id = update.effective_user.id
            username = context.user_data.get("pending_username")
            raw_password = update.message.text.strip()
            user_obj = await find_user_by_name(username)
            lang = context.user_data.get("lang", "ru")
            if not user_obj:
                text = ("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏—Ç–µ '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' —Å–Ω–æ–≤–∞."
                        if lang == "ru" else
                        "–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã —Ç–∞–±—ã–ª–º–∞–¥—ã. “ö–∞–π—Ç–∞ '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω –±–∞—Å—ã“£—ã–∑.")
                await update.message.reply_text(text, reply_markup=UNAUTHORIZED_KEYBOARD)
                return ConversationHandler.END
            auth_user = await find_auth_user_by_user(user_obj)
            if not auth_user:
                text = ("–î–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø–∞—Ä–æ–ª—è. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                        if lang == "ru" else
                        "–û—Å—ã –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã “Ø—à—ñ–Ω “õ“±–ø–∏—è —Å”©–∑ –∂–æ“õ. ”ò–∫—ñ–º—à—ñ–¥–µ–Ω –∫”©–º–µ–∫ —Å“±—Ä–∞“£—ã–∑.")
                await update.message.reply_text(text, reply_markup=UNAUTHORIZED_KEYBOARD)
                return ConversationHandler.END
            if check_password(raw_password, auth_user.password_hash):
                AUTHORIZED_USERS.add(tg_id)
                user_obj.telegram_id = tg_id
                await save_user(user_obj)
                await log_to_linked(tg_id, getattr(user_obj, "iin", ""), getattr(user_obj, "t_number", ""))
                text = ("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã."
                        if lang == "ru" else
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å”ô—Ç—Ç—ñ ”©—Ç—Ç—ñ! –ï–Ω–¥—ñ –±–∞—Ä–ª—ã“õ –∫–æ–º–∞–Ω–¥–∞–ª–∞—Ä “õ–æ–ª –∂–µ—Ç—ñ–º–¥—ñ.")
                await update.message.reply_text(text, reply_markup=AUTHORIZED_KEYBOARD)
            else:
                text = ("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ù–∞–∂–º–∏—Ç–µ '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞."
                        if lang == "ru" else
                        "“ö–∞—Ç–µ “õ“±–ø–∏—è —Å”©–∑. “ö–∞–π—Ç–∞ '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω –±–∞—Å—ã“£—ã–∑.")
                await update.message.reply_text(text, reply_markup=UNAUTHORIZED_KEYBOARD)
            return ConversationHandler.END

        auth_conv_handler = ConversationHandler(
            entry_points=[MessageHandler(filters.Regex("^–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è$"), start_auth)],
            states={
                WAITING_USERNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, username_input)],
                WAITING_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, password_input)]
            },
            fallbacks=[]
        )

        # ---------- Vacation (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ----------
        async def start_vacation(update: Update, context: ContextTypes.DEFAULT_TYPE):
            tg_id = update.effective_user.id
            lang = context.user_data.get("lang", "ru")
            if tg_id not in AUTHORIZED_USERS:
                text = ("–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å (–Ω–∞–∂–º–∏—Ç–µ '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è')."
                        if lang == "ru" else "–ê–ª–¥—ã–º–µ–Ω –∂“Ø–π–µ–≥–µ –∫—ñ—Ä—É “õ–∞–∂–µ—Ç ('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω –±–∞—Å—ã“£—ã–∑).")
                await update.message.reply_text(text, reply_markup=UNAUTHORIZED_KEYBOARD)
                return ConversationHandler.END
            user_obj = await find_user_by_telegram_id(tg_id)
            if not user_obj or (not user_obj.name and not user_obj.first_name):
                text = ("–í–∞—à–µ –§–ò–û –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –≤ –ë–î. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                        if lang == "ru" else "–î–µ—Ä–µ–∫“õ–æ—Ä–¥–∞ –§–ò–û —Ç–æ–ª—Ç—ã—Ä—ã–ª–º–∞“ì–∞–Ω. ”ò–∫—ñ–º—à—ñ–¥–µ–Ω –∫”©–º–µ–∫ —Å“±—Ä–∞“£—ã–∑.")
                await update.message.reply_text(text)
                return ConversationHandler.END
            short_fio = make_short_name_no_dots_for_user(user_obj)
            context.user_data["short_fio"] = short_fio
            context.user_data["user_obj"] = user_obj
            text = ("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å:" if lang == "ru" else "–õ–∞—É–∞–∑—ã–º—ã“£—ã–∑–¥—ã –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:")
            await update.message.reply_text(text)
            return WAITING_JOB

        async def vacation_job_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
            job = update.message.text.strip()
            user_obj = context.user_data.get("user_obj")
            lang = context.user_data.get("lang", "ru")
            if not user_obj:
                text = ("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ." 
                        if lang == "ru" else "“ö–∞—Ç–µ: –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ç–∞–±—ã–ª–º–∞–¥—ã.")
                await update.message.reply_text(text, reply_markup=AUTHORIZED_KEYBOARD)
                return ConversationHandler.END
            vac_data = await get_vacation_async(user_obj, job)
            if not vac_data:
                text = ("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –≥—Ä–∞—Ñ–∏–∫–µ –æ—Ç–ø—É—Å–∫–æ–≤." 
                        if lang == "ru" else "–î–µ–º–∞–ª—ã—Å –∫–µ—Å—Ç–µ—Å—ñ–Ω–¥–µ —Å”ô–π–∫–µ—Å –∂–∞–∑–±–∞ —Ç–∞–±—ã–ª–º–∞–¥—ã.")
                await update.message.reply_text(text, reply_markup=AUTHORIZED_KEYBOARD)
            else:
                short_fio = make_short_name_no_dots_for_user(user_obj)
                msg = (
                    f"–§–ò–û (—Å–æ–∫—Ä.): {short_fio}\n"
                    f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {job}\n"
                    f"–ö–æ–ª. –¥–Ω–µ–π: {vac_data['days']}\n"
                    f"–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–µ –¥–Ω–∏: {vac_data['agreed']}\n"
                    f"–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–∏–µ: {vac_data['transfer']}\n"
                    f"–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {vac_data['note']}"
                )
                await update.message.reply_text(msg, reply_markup=AUTHORIZED_KEYBOARD)
            return ConversationHandler.END

        vacation_conv_handler = ConversationHandler(
            entry_points=[MessageHandler(filters.Regex("^–û—Ç–ø—É—Å–∫$"), start_vacation)],
            states={WAITING_JOB: [MessageHandler(filters.TEXT & ~filters.COMMAND, vacation_job_input)]},
            fallbacks=[]
        )

        # ---------- ConversationHandler –¥–ª—è "–†–∞—Å—á–µ—Ç–Ω—ã–π –ª–∏—Å—Ç" ----------
        async def start_payroll(update: Update, context: ContextTypes.DEFAULT_TYPE):
            tg_id = update.effective_user.id
            lang = context.user_data.get("lang", "ru")
            user_obj = await find_user_by_telegram_id(tg_id)
            if not user_obj:
                await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                                                reply_markup=AUTHORIZED_KEYBOARD)
                return ConversationHandler.END
            payrolls = await async_get_payroll_by_user(user_obj, month=None)
            if not payrolls:
                await update.message.reply_text("–†–∞—Å—á–µ—Ç–Ω—ã–π –ª–∏—Å—Ç –¥–ª—è –≤–∞—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=AUTHORIZED_KEYBOARD)
                return ConversationHandler.END
            available_months = sorted({p.get("–ú–µ—Å—è—Ü") for p in payrolls if p.get("–ú–µ—Å—è—Ü")})
            if len(available_months) > 1:
                context.user_data["payrolls"] = payrolls
                month_keyboard = ReplyKeyboardMarkup([[m] for m in available_months] + [["–ù–∞–∑–∞–¥"]], resize_keyboard=True)
                await update.message.reply_text("–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞—Å—á–µ—Ç–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:", reply_markup=month_keyboard)
                return WAITING_PAYROLL_MONTH
            else:
                context.user_data["selectedMonth"] = available_months[0]
                payroll = payrolls[0]
                msg = format_payroll_text(payroll)
                await update.message.reply_text(msg, reply_markup=PDF_KEYBOARD)
                context.user_data["selected_payroll"] = payroll
                return WAITING_PDF_CONFIRM

        async def choose_payroll_month(update: Update, context: ContextTypes.DEFAULT_TYPE):
            chosen = update.message.text.strip()
            if chosen.lower() == "–Ω–∞–∑–∞–¥":
                await update.message.reply_text("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=AUTHORIZED_KEYBOARD)
                return ConversationHandler.END
            payrolls = context.user_data.get("payrolls", [])
            selected = [p for p in payrolls if p.get("–ú–µ—Å—è—Ü") == chosen]
            if not selected:
                await update.message.reply_text("–†–∞—Å—á–µ—Ç–Ω—ã–π –ª–∏—Å—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=AUTHORIZED_KEYBOARD)
                return ConversationHandler.END
            else:
                payroll = selected[0]
                msg = format_payroll_text(payroll)
                await update.message.reply_text(msg, reply_markup=PDF_KEYBOARD)
                context.user_data["selected_payroll"] = payroll
                context.user_data["selectedMonth"] = chosen
                return WAITING_PDF_CONFIRM

        async def pdf_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
            lang = context.user_data.get("lang", "ru")
            tg_id = update.effective_user.id
            user_obj = context.user_data.get("user_obj")
            if not user_obj:
                user_obj = await find_user_by_telegram_id(tg_id)
                context.user_data["user_obj"] = user_obj
            selected_month = context.user_data.get("selectedMonth") or context.user_data.get("selected_payroll", {}).get("–ú–µ—Å—è—Ü")
            await update.message.reply_text(
                f"DEBUG: user_obj.iin = {getattr(user_obj, 'iin', None)} / selectedMonth = {selected_month}"
            )
            if not user_obj or not user_obj.iin or not selected_month:
                await update.message.reply_text(
                    "–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—á—ë—Ç–Ω—ã–π –ª–∏—Å—Ç.",
                    reply_markup=AUTHORIZED_KEYBOARD
                )
                return ConversationHandler.END
            await update.message.reply_text(
                f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –ò–ò–ù: {user_obj.iin} –∏ –º–µ—Å—è—Ü–µ–º: {selected_month}"
            )
            text = update.message.text.strip().lower()
            if text == "—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å pdf":
                pdf_url = await request_payroll_pdf(user_obj.iin, selected_month)
                if not pdf_url:
                    await update.message.reply_text(
                        "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å—á–µ—Ç–Ω–æ–≥–æ –ª–∏—Å—Ç–∞.",
                        reply_markup=AUTHORIZED_KEYBOARD
                    )
                    return ConversationHandler.END
                await update.message.reply_text(
                    f"PDF-–≤–µ—Ä—Å–∏—è —Ä–∞—Å—á–µ—Ç–Ω–æ–≥–æ –ª–∏—Å—Ç–∞: {pdf_url}",
                    reply_markup=AUTHORIZED_KEYBOARD
                )
            elif text == "–Ω–∞–∑–∞–¥":
                await update.message.reply_text(
                    "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –º–µ—Å—è—Ü–∞.",
                    reply_markup=AUTHORIZED_KEYBOARD
                )
                return await start_payroll(update, context)
            else:
                await update.message.reply_text("–†–∞—Å—á–µ—Ç–Ω—ã–π –ª–∏—Å—Ç –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.", reply_markup=AUTHORIZED_KEYBOARD)
            return ConversationHandler.END

        payroll_conv_handler = ConversationHandler(
            entry_points=[MessageHandler(filters.Regex("^–†–∞—Å—á–µ—Ç–Ω—ã–π –ª–∏—Å—Ç$"), start_payroll)],
            states={
                WAITING_PAYROLL_MONTH: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_payroll_month)],
                WAITING_PDF_CONFIRM: [MessageHandler(filters.TEXT & ~filters.COMMAND, pdf_confirm)]
            },
            fallbacks=[]
        )

        # ---------- –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤ ----------
        async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
            text = update.message.text.strip()
            tg_id = update.effective_user.id
            lang = context.user_data.get("lang", "ru")
            if tg_id not in AUTHORIZED_USERS:
                if text == "–ü–æ–º–æ—â—å":
                    if not context.user_data.get("help_sent", False):
                        resp = ("–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º:\n"
                                "https://t.me/TechSupport\n"
                                "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' –¥–ª—è –≤—Ö–æ–¥–∞."
                                if lang == "ru" else
                                "–ö”©–º–µ–∫ –∞–ª—É “Ø—à—ñ–Ω —Ç–µ—Ö–Ω–∏–∫–∞–ª—ã“õ –º–∞–º–∞–Ω–º–µ–Ω –±–∞–π–ª–∞–Ω—ã—Å—ã“£—ã–∑:\n"
                                "https://t.me/TechSupport\n"
                                "–ù–µ–º–µ—Å–µ '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' –∞—Ä“õ—ã–ª—ã –∫—ñ—Ä—É–¥—ñ –±–∞—Å—ã“£—ã–∑.")
                        await update.message.reply_text(resp, reply_markup=UNAUTHORIZED_KEYBOARD)
                        context.user_data["help_sent"] = True
                    else:
                        resp = ("–í—ã –º–æ–∂–µ—Ç–µ:\n- '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' –¥–ª—è –≤—Ö–æ–¥–∞\n- '–ü–æ–º–æ—â—å' –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏"
                                if lang == "ru" else
                                "–°—ñ–∑ –º—ã–Ω–∞–ª–∞—Ä–¥—ã –æ—Ä—ã–Ω–¥–∞–π –∞–ª–∞—Å—ã–∑:\n- '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' –∞—Ä“õ—ã–ª—ã –∫—ñ—Ä—É\n- '–ü–æ–º–æ—â—å' –∞—Ä“õ—ã–ª—ã —Ç–µ—Ö–Ω–∏–∫–∞–ª—ã“õ –∫”©–º–µ–∫ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–ª–µ—Ä—ñ")
                        await update.message.reply_text(resp, reply_markup=UNAUTHORIZED_KEYBOARD)
                else:
                    resp = ("–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å (–Ω–∞–∂–º–∏—Ç–µ '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è')."
                            if lang == "ru" else
                            "–ê–ª–¥—ã–º–µ–Ω –∂“Ø–π–µ–≥–µ –∫—ñ—Ä—É “õ–∞–∂–µ—Ç ('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω –±–∞—Å—ã“£—ã–∑).")
                    await update.message.reply_text(resp, reply_markup=UNAUTHORIZED_KEYBOARD)
            else:
                if text == "–ü–æ–º–æ—â—å":
                    resp = ("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n- –ü–æ–º–æ—â—å\n- –û—Ç–ø—É—Å–∫\n- –†–∞—Å—á–µ—Ç–Ω—ã–π –ª–∏—Å—Ç\n- –ó–∞—Ä–ø–ª–∞—Ç–∞\n- –î–æ–∫—É–º–µ–Ω—Ç—ã\n- –ê–¥–º–∏–Ω–∫–∞"
                            if lang == "ru" else
                            "“ö–æ–ª –∂–µ—Ç—ñ–º–¥—ñ –∫–æ–º–∞–Ω–¥–∞–ª–∞—Ä:\n- –ü–æ–º–æ—â—å\n- –û—Ç–ø—É—Å–∫\n- –†–∞—Å—á–µ—Ç–Ω—ã–π –ª–∏—Å—Ç\n- –ó–∞—Ä–ø–ª–∞—Ç–∞\n- –î–æ–∫—É–º–µ–Ω—Ç—ã\n- –ê–¥–º–∏–Ω–∫–∞")
                    await update.message.reply_text(resp, reply_markup=AUTHORIZED_KEYBOARD)
                elif text == "–ó–∞—Ä–ø–ª–∞—Ç–∞":
                    user_obj = await find_user_by_telegram_id(tg_id)
                    if not user_obj:
                        resp = ("–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                                if lang == "ru" else
                                "–î–µ—Ä–µ–∫“õ–æ—Ä–¥–∞ –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã —Ç–∞–±—ã–ª–º–∞–¥—ã. ”ò–∫—ñ–º—à—ñ–¥–µ–Ω –∫”©–º–µ–∫ —Å“±—Ä–∞“£—ã–∑.")
                        await update.message.reply_text(resp, reply_markup=AUTHORIZED_KEYBOARD)
                    elif not user_obj.iin:
                        resp = ("–£ –≤–∞—Å –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω –ò–ò–ù –≤ –ë–î. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                                if lang == "ru" else
                                "–°—ñ–∑–¥—ñ“£ –ò–ò–ù —Ç–æ–ª—Ç—ã—Ä—ã–ª–º–∞“ì–∞–Ω. ”ò–∫—ñ–º—à—ñ–¥–µ–Ω –∫”©–º–µ–∫ —Å“±—Ä–∞“£—ã–∑.")
                        await update.message.reply_text(resp, reply_markup=AUTHORIZED_KEYBOARD)
                    else:
                        result = await get_salary_async(user_obj.iin)
                        if not result:
                            resp = ("–í–∞—à –ò–ò–ù –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ –∑–∞—Ä–ø–ª–∞—Ç."
                                    if lang == "ru" else
                                    "–°—ñ–∑–¥—ñ“£ –ò–ò–ù –∫–µ—Å—Ç–µ–¥–µ —Ç–∞–±—ã–ª–º–∞–¥—ã.")
                            await update.message.reply_text(resp, reply_markup=AUTHORIZED_KEYBOARD)
                        else:
                            fio, salary = result
                            msg = (f"–ü–æ –≤–∞—à–µ–º—É –ò–ò–ù: {user_obj.iin}\n–§–ò–û: {fio}\n–ó–∞—Ä–ø–ª–∞—Ç–∞: {salary}"
                                   if lang == "ru" else
                                   f"–°—ñ–∑–¥—ñ“£ –ò–ò–ù: {user_obj.iin}\n–§–ò–û: {fio}\n–ñ–∞–ª–∞“õ—ã: {salary}")
                            await update.message.reply_text(msg, reply_markup=AUTHORIZED_KEYBOARD)
                elif text == "–î–æ–∫—É–º–µ–Ω—Ç—ã":
                    # –ü–æ–ª—É—á–∞–µ–º folder_id –¥–ª—è –æ—Ç–¥–µ–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    department_folder_id = await get_user_department_folder(tg_id)
                    if not department_folder_id:
                        await update.message.reply_text(
                            "–í–∞—à –æ—Ç–¥–µ–ª –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –∏–ª–∏ –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                            reply_markup=AUTHORIZED_KEYBOARD
                        )
                    else:
                        files = get_drive_files_by_folder(page_size=10, folder_id=department_folder_id)
                        if not files:
                            await update.message.reply_text(
                                "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤–∞—à–µ–≥–æ –æ—Ç–¥–µ–ª–∞.",
                                reply_markup=AUTHORIZED_KEYBOARD
                            )
                        else:
                            doc_text = "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:\n"
                            for f in files:
                                link = f.get("file_link")
                                name = f.get("name")
                                doc_text += f"- [{name}]({link})\n" if link else f"- {name} (–Ω–µ—Ç —Å—Å—ã–ª–∫–∏)\n"
                            await update.message.reply_text(doc_text, parse_mode="Markdown", reply_markup=AUTHORIZED_KEYBOARD)
                elif text == "–û—Ç–ø—É—Å–∫":
                    await start_vacation(update, context)
                elif text == "–†–∞—Å—á–µ—Ç–Ω—ã–π –ª–∏—Å—Ç":
                    return await start_payroll(update, context)
                elif text == "–ö–æ–Ω—Ç–∞–∫—Ç—ã":
                     await update.message.reply_text(CONTACTS_TEXT, reply_markup=AUTHORIZED_KEYBOARD)
                elif text == "–ê–¥–º–∏–Ω–∫–∞":
                    return await start_admin_panel(update, context)
                else:
                    resp = ("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–∂–º–∏—Ç–µ '–ü–æ–º–æ—â—å'."
                            if lang == "ru" else "–ë–µ–ª–≥—ñ—Å—ñ–∑ –∫–æ–º–∞–Ω–¥–∞. '–ü–æ–º–æ—â—å' –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω –±–∞—Å—ã“£—ã–∑.")
                    await update.message.reply_text(resp, reply_markup=AUTHORIZED_KEYBOARD)
            return ConversationHandler.END

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ ConversationHandler'—ã –∏ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        app.add_handler(language_conv_handler)
        app.add_handler(auth_conv_handler)
        app.add_handler(vacation_conv_handler)
        app.add_handler(payroll_conv_handler)
        app.add_handler(admin_panel_conv_handler)
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))

        app.run_polling()
